{"version":3,"sources":["../../cli-fs/src/index.ts","../../cli-data-dir/src/index.ts"],"sourcesContent":["import { access, readFile, writeFile, mkdir } from 'node:fs/promises';\nimport { dirname, join, relative } from 'node:path';\nimport { EOL } from 'node:os';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { packageJsonSchema } from './schemas.js';\nimport type { PackageJson } from './schemas.js';\n\nexport type { PackageJson };\n\nexport function toJsonString(object: unknown, opts?: { spaces: number }) {\n  return JSON.stringify(object, null, opts?.spaces).concat(EOL);\n}\n\nexport async function writeJson(\n  filePath: string,\n  object: unknown,\n  opts?: { spaces: number }\n) {\n  try {\n    const str = toJsonString(object, opts);\n    await mkdir(dirname(filePath), { recursive: true });\n    await writeFile(filePath, str, 'utf-8');\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.FailedToWriteJson({\n        filePath,\n        cause: e,\n      }),\n      cause: e,\n    });\n  }\n}\n\nexport async function readJson(file: string): Promise<unknown> {\n  let content = null;\n  try {\n    content = await readFile(file, 'utf-8');\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.FailedToReadJson({\n        filePath: file,\n        cause: e,\n      }),\n    });\n  }\n\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.InvalidJsonFile({\n        filePath: file,\n        cause: e,\n      }),\n    });\n  }\n}\n\nexport function pathExists(path: string) {\n  return access(path)\n    .then(() => true)\n    .catch(() => false);\n}\n\nexport async function outputFile(file: string, content: string) {\n  await mkdir(dirname(file), { recursive: true });\n  await writeFile(file, content, 'utf-8');\n}\n\nexport interface ArchiveResponse {\n  fileCount: number;\n  compressedSizeInKb: number;\n  uncompressedSizeInKb: number;\n}\n\nexport async function readPackageJson(projectFolder: string) {\n  const packageJsonPath = join(projectFolder, 'package.json');\n\n  const json = await readJson(packageJsonPath);\n  const parsedPackageJson = await packageJsonSchema.safeParseAsync(json);\n\n  if (!parsedPackageJson.success) {\n    throw new CliError({\n      code: CliErrorCode.InvalidConfigSchemaError({\n        configPath: packageJsonPath,\n        zodError: parsedPackageJson.error,\n      }),\n    });\n  }\n\n  /**\n   * Returning original json because zod clone object and change the order of keys.\n   * It's safe to return the original json because we already validated it.\n   */\n  return json as PackageJson;\n}\n\nexport async function writePackageJson(\n  projectFolder: string,\n  packageJson: PackageJson\n) {\n  const packageJsonPath = join(projectFolder, 'package.json');\n\n  await writeJson(packageJsonPath, packageJson, { spaces: 2 });\n}\n\nexport function relativeFolderName(rootFolder: string, filePath: string) {\n  return relative(rootFolder, dirname(filePath));\n}\n","import { mkdir } from 'node:fs/promises';\nimport { resolve } from 'node:path';\nimport { homedir } from 'node:os';\nimport { getTestOverrides } from '@wix/cli-test-overrides';\n\nexport function getDataDirPath() {\n  return getTestOverrides().dataDir ?? resolve(homedir(), '.wix');\n}\n\nexport async function ensureDataDirExists() {\n  await mkdir(getDataDirPath(), { recursive: true });\n}\n"],"mappings":";;+HAAAA,IAAA,OAAS,UAAAC,EAAQ,YAAAC,EAAU,aAAAC,EAAW,SAAAC,MAAa,mBACnD,OAAS,WAAAC,EAAS,QAAAC,EAAM,YAAAC,MAAgB,YACxC,OAAS,OAAAC,MAAW,UAOb,SAASC,EAAaC,EAAiBC,EAA2B,CACvE,OAAO,KAAK,UAAUD,EAAQ,KAAMC,GAAM,MAAM,EAAE,OAAOC,CAAG,CAC9D,CAEA,eAAsBC,EACpBC,EACAJ,EACAC,EACA,CACA,GAAI,CACF,IAAMI,EAAMN,EAAaC,EAAQC,CAAI,EACrC,MAAMK,EAAMC,EAAQH,CAAQ,EAAG,CAAE,UAAW,EAAK,CAAC,EAClD,MAAMI,EAAUJ,EAAUC,EAAK,OAAO,CACxC,OAASI,EAAG,CACV,MAAM,IAAIC,EAAS,CACjB,KAAMC,EAAa,kBAAkB,CACnC,SAAAP,EACA,MAAOK,CACT,CAAC,EACD,MAAOA,CACT,CAAC,CACH,CACF,CAEA,eAAsBG,EAASC,EAAgC,CAC7D,IAAIC,EAAU,KACd,GAAI,CACFA,EAAU,MAAMC,EAASF,EAAM,OAAO,CACxC,OAASJ,EAAG,CACV,MAAM,IAAIC,EAAS,CACjB,KAAMC,EAAa,iBAAiB,CAClC,SAAUE,EACV,MAAOJ,CACT,CAAC,CACH,CAAC,CACH,CAEA,GAAI,CACF,OAAO,KAAK,MAAMK,CAAO,CAC3B,OAASL,EAAG,CACV,MAAM,IAAIC,EAAS,CACjB,KAAMC,EAAa,gBAAgB,CACjC,SAAUE,EACV,MAAOJ,CACT,CAAC,CACH,CAAC,CACH,CACF,CAEO,SAASO,EAAWC,EAAc,CACvC,OAAOC,EAAOD,CAAI,EACf,KAAK,IAAM,EAAI,EACf,MAAM,IAAM,EAAK,CACtB,CAEA,eAAsBE,EAAWN,EAAcC,EAAiB,CAC9D,MAAMR,EAAMC,EAAQM,CAAI,EAAG,CAAE,UAAW,EAAK,CAAC,EAC9C,MAAML,EAAUK,EAAMC,EAAS,OAAO,CACxC,CCnEAM,IACA,OAAS,WAAAC,MAAe,YACxB,OAAS,WAAAC,MAAe,UAGjB,SAASC,GAAiB,CAC/B,OAAOC,EAAiB,EAAE,SAAWC,EAAQC,EAAQ,EAAG,MAAM,CAChE","names":["init_esm_shims","access","readFile","writeFile","mkdir","dirname","join","relative","EOL","toJsonString","object","opts","EOL","writeJson","filePath","str","mkdir","dirname","writeFile","e","CliError","CliErrorCode","readJson","file","content","readFile","pathExists","path","access","outputFile","init_esm_shims","resolve","homedir","getDataDirPath","getTestOverrides","resolve","homedir"]}