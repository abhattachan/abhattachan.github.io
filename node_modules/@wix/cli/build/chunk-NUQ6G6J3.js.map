{"version":3,"sources":["../../cli-user-config/src/index.ts","../../cli-user-config/src/user-config.ts","../../cli-core-definitions/src/index.ts","../../velo-github-layout-definitions/build/index.js"],"sourcesContent":["export * from './user-config.js';\n","import { join } from 'node:path';\nimport { getDataDirPath } from '@wix/cli-data-dir';\nimport { pathExists, readJson, writeJson } from '@wix/cli-fs';\nimport { userConfigSchema, CONFIG_FILE_NAME } from '@wix/cli-core-definitions';\nimport type { UserConfig } from '@wix/cli-core-definitions';\n\nfunction getUserConfigPath() {\n  return join(getDataDirPath(), CONFIG_FILE_NAME);\n}\n\nexport async function readUserConfig() {\n  const configPath = getUserConfigPath();\n  const isConfigExist = await pathExists(configPath);\n  const json = isConfigExist ? await readJson(configPath) : {};\n  return userConfigSchema.parse(json);\n}\n\nexport async function updateUserConfig(config: Partial<UserConfig>) {\n  const currentConfig = await readUserConfig();\n  const newConfig = {\n    ...currentConfig,\n    ...config,\n  };\n\n  const configPath = getUserConfigPath();\n  await writeJson(configPath, newConfig);\n}\n","import { join } from 'node:path';\nimport { z } from 'zod';\nimport { getGitIgnoredFolder } from '@wix/velo-github-layout-definitions';\n\nexport const SENTRY_DSN =\n  'https://d15bb47ad34c428f92d0ac434a5734eb@o37417.ingest.sentry.io/4504116669317120';\nexport const CONFIG_FILENAME = 'wix.config.json';\nexport const WIX_LOCK_FILENAME = 'wix.lock';\nexport const PACKAGE_JSON_FILENAME = 'package.json';\nexport const VERSION_FILE_NAME = 'version.cache.json';\nexport const CONFIG_FILE_NAME = 'user.config.json';\n\nexport const userConfigSchema = z.object({\n  telemetry: z.boolean().default(true),\n  tunneling: z.boolean().default(false),\n});\n\nexport type UserConfig = z.infer<typeof userConfigSchema>;\n\nexport function getDebugLogFilePath(projectFolder: string) {\n  return join(getGitIgnoredFolder(projectFolder), 'debug.log');\n}\n\nexport function getUserFeedbackCacheFilePath(projectFolder: string) {\n  return join(getGitIgnoredFolder(projectFolder), 'user-feedback.cache.json');\n}\n","// src/index.ts\nimport { join } from \"node:path\";\nfunction getGitIgnoredFolder(projectFolder = \"\") {\n  return join(projectFolder, \".wix\");\n}\nfunction getTypesDir(projectFolder) {\n  return join(getGitIgnoredFolder(projectFolder), \"types\");\n}\nfunction getPageTypesDir(projectFolder, pageId) {\n  return join(getTypesDir(projectFolder), pageId);\n}\nfunction getPageConfigFilename(projectFolder, pageId) {\n  return join(getPageTypesDir(projectFolder, pageId), `jsconfig.json`);\n}\nfunction getBackendConfigPath(projectFolder) {\n  return join(getTypesDir(projectFolder), \"backend\", \"jsconfig.json\");\n}\nfunction getPublicConfigPath(projectFolder) {\n  return join(getTypesDir(projectFolder), \"public\", \"jsconfig.json\");\n}\nfunction getSourceFolder(projectFolder) {\n  return join(projectFolder, \"src\");\n}\nfunction getPagesFolder(projectFolder = \"\") {\n  return join(getSourceFolder(projectFolder), \"pages\");\n}\nfunction getPublicFolder(projectFolder = \"\") {\n  return join(getSourceFolder(projectFolder), \"public\");\n}\nfunction getBackendFolder(projectFolder = \"\") {\n  return join(getSourceFolder(projectFolder), \"backend\");\n}\nvar SLASH = \"/\";\nvar ENCODED_SLASH = \"\\\\\\\\\";\nfunction encodeSlash(string) {\n  return string.replace(new RegExp(SLASH, \"g\"), ENCODED_SLASH);\n}\nfunction getPageCodeFilePath(projectFolder, page, shouldEscapeSlash = false) {\n  const pageTitle = shouldEscapeSlash ? encodeSlash(page.pageTitle) : page.pageTitle;\n  return join(\n    getPagesFolder(projectFolder),\n    `${[pageTitle, page.pageMetaData.pageId].filter(Boolean).join(\".\")}.js`\n  );\n}\nexport {\n  encodeSlash,\n  getBackendConfigPath,\n  getBackendFolder,\n  getGitIgnoredFolder,\n  getPageCodeFilePath,\n  getPageConfigFilename,\n  getPageTypesDir,\n  getPagesFolder,\n  getPublicConfigPath,\n  getPublicFolder,\n  getSourceFolder,\n  getTypesDir\n};\n"],"mappings":";;6IAAAA,ICAAC,IAAA,OAAS,QAAAC,MAAY,YCArBC,IAAA,OAAS,QAAAC,MAAY,YCArBC,IACA,OAAS,QAAAC,MAAY,YACrB,SAASC,EAAoBC,EAAgB,GAAI,CAC/C,OAAOF,EAAKE,EAAe,MAAM,CACnC,CACA,SAASC,EAAYD,EAAe,CAClC,OAAOF,EAAKC,EAAoBC,CAAa,EAAG,OAAO,CACzD,CAaA,SAASE,EAAgBC,EAAe,CACtC,OAAOC,EAAKD,EAAe,KAAK,CAClC,CACA,SAASE,EAAeF,EAAgB,GAAI,CAC1C,OAAOC,EAAKF,EAAgBC,CAAa,EAAG,OAAO,CACrD,CDrBO,IAAMG,EACX,oFACWC,EAAkB,kBAClBC,EAAoB,WACpBC,EAAwB,eACxBC,EAAoB,qBACpBC,EAAmB,mBAEnBC,EAAmBC,EAAE,OAAO,CACvC,UAAWA,EAAE,QAAQ,EAAE,QAAQ,EAAI,EACnC,UAAWA,EAAE,QAAQ,EAAE,QAAQ,EAAK,CACtC,CAAC,EAIM,SAASC,EAAoBC,EAAuB,CACzD,OAAOC,EAAKC,EAAoBF,CAAa,EAAG,WAAW,CAC7D,CAEO,SAASG,EAA6BH,EAAuB,CAClE,OAAOC,EAAKC,EAAoBF,CAAa,EAAG,0BAA0B,CAC5E,CDnBA,SAASI,GAAoB,CAC3B,OAAOC,EAAKC,EAAe,EAAGC,CAAgB,CAChD,CAEA,eAAsBC,GAAiB,CACrC,IAAMC,EAAaL,EAAkB,EAE/BM,EADgB,MAAMC,EAAWF,CAAU,EACpB,MAAMG,EAASH,CAAU,EAAI,CAAC,EAC3D,OAAOI,EAAiB,MAAMH,CAAI,CACpC,CAEA,eAAsBI,EAAiBC,EAA6B,CAElE,IAAMC,EAAY,CAChB,GAFoB,MAAMR,EAAe,EAGzC,GAAGO,CACL,EAEMN,EAAaL,EAAkB,EACrC,MAAMa,EAAUR,EAAYO,CAAS,CACvC","names":["init_esm_shims","init_esm_shims","join","init_esm_shims","join","init_esm_shims","join","getGitIgnoredFolder","projectFolder","getTypesDir","getSourceFolder","projectFolder","join","getPagesFolder","SENTRY_DSN","CONFIG_FILENAME","WIX_LOCK_FILENAME","PACKAGE_JSON_FILENAME","VERSION_FILE_NAME","CONFIG_FILE_NAME","userConfigSchema","z","getDebugLogFilePath","projectFolder","join","getGitIgnoredFolder","getUserFeedbackCacheFilePath","getUserConfigPath","join","getDataDirPath","CONFIG_FILE_NAME","readUserConfig","configPath","json","pathExists","readJson","userConfigSchema","updateUserConfig","config","newConfig","writeJson"]}