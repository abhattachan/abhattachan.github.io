import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import{m as g,n as b,u as T,v as S}from"./chunk-J3IJS26Z.js";import{a as f,c as l,f as h,i as d}from"./chunk-UO4ZAUJK.js";var H=l(a=>{d();var p=a&&a.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(a,"__esModule",{value:!0});a.FetchInstrumentation=void 0;var _=p(f("node:diagnostics_channel")),o=(S(),h(T)),r=(b(),h(g));function R(n){return n instanceof AggregateError?n.errors.map(t=>t.message).join(", "):n.message}function C(n){let t="content-length";for(let e=0;e<n.length;e+=2){let i=n[e];if(i.length===t.length&&i.toString().toLowerCase()===t){let s=Number(n[e+1]);return Number.isNaN(Number(s))?void 0:s}}}async function N(){try{await fetch("")}catch{}}var u=class{channelSubs;spanFromReq=new WeakMap;tracer;config;meter;instrumentationName="opentelemetry-instrumentation-node-18-fetch";instrumentationVersion="1.0.0";instrumentationDescription="Instrumentation for Node 18 fetch via diagnostics_channel";subscribeToChannel(t,e){let i=_.default.channel(t);i.subscribe(e),this.channelSubs.push({name:t,channel:i,onMessage:e})}constructor(t){N(),this.channelSubs=[],this.meter=r.metrics.getMeter(this.instrumentationName,this.instrumentationVersion),this.tracer=r.trace.getTracer(this.instrumentationName,this.instrumentationVersion),this.config={...t}}disable(){this.channelSubs?.forEach(t=>t.channel.unsubscribe(t.onMessage))}enable(){this.subscribeToChannel("undici:request:create",t=>this.onRequest(t)),this.subscribeToChannel("undici:request:headers",t=>this.onHeaders(t)),this.subscribeToChannel("undici:request:trailers",t=>this.onDone(t)),this.subscribeToChannel("undici:request:error",t=>this.onError(t))}setTracerProvider(t){this.tracer=t.getTracer(this.instrumentationName,this.instrumentationVersion)}setMeterProvider(t){this.meter=t.getMeter(this.instrumentationName,this.instrumentationVersion)}setConfig(t){this.config={...t}}getConfig(){return this.config}onRequest({request:t}){if(t.method==="CONNECT"||this.config.ignoreRequestHook&&this.config.ignoreRequestHook(t)===!0)return;let e=this.tracer.startSpan(`HTTP ${t.method}`,{kind:r.SpanKind.CLIENT,attributes:{[o.SemanticAttributes.HTTP_URL]:E(t.origin,t.path),[o.SemanticAttributes.HTTP_METHOD]:t.method,[o.SemanticAttributes.HTTP_TARGET]:t.path,"http.client":"fetch"}}),i=r.trace.setSpan(r.context.active(),e),s={};r.propagation.inject(i,s),this.config.onRequest&&this.config.onRequest({request:t,span:e,additionalHeaders:s}),Array.isArray(t.headers)?t.headers.push(...Object.entries(s).flat()):t.headers+=Object.entries(s).map(([c,m])=>`${c}: ${m}\r
`).join(""),this.spanFromReq.set(t,e)}onHeaders({request:t,response:e}){let i=this.spanFromReq.get(t);if(i!==void 0){let s=C(e.headers),c={[o.SemanticAttributes.HTTP_STATUS_CODE]:e.statusCode};s&&(c[o.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH]=s),i.setAttributes(c),i.setStatus({code:e.statusCode>=400?r.SpanStatusCode.ERROR:r.SpanStatusCode.OK,message:String(e.statusCode)})}}onDone({request:t}){let e=this.spanFromReq.get(t);e!==void 0&&(e.end(),this.spanFromReq.delete(t))}onError({request:t,error:e}){let i=this.spanFromReq.get(t);i!==void 0&&(i.recordException(e),i.setStatus({code:r.SpanStatusCode.ERROR,message:R(e)}),i.end())}};a.FetchInstrumentation=u;function E(n,t="/"){let e=`${n}`;return n.endsWith("/")&&t.startsWith("/")?`${e}${t.slice(1)}`:!n.endsWith("/")&&!t.startsWith("/")?`${e}/${t.slice(1)}`:`${e}${t}`}});export default H();
//# sourceMappingURL=build-JJQXAOLF.js.map