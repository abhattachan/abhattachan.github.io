{"version":3,"sources":["../../cli-site/src/install/index.ts","../../cli-site/src/install/install.ts","../../cli-site/src/velo-npm/anyNpm.ts","../../cli-site/src/velo-npm/anyNpmMigration.ts","../../cli-site/src/files/velo.dependencies.ts"],"sourcesContent":["export { install } from './install.js';\n","import { cwd } from 'node:process';\nimport type { CommandServices } from '@wix/cli-command-contract';\nimport { getDefaultPackageManager } from '../dependency-manager/index.js';\nimport { createI18nT } from '../i18n.js';\nimport { createLogger } from '../logger.js';\nimport type { PackageManager } from '../dependency-manager/index.js';\nimport { installImpl as anyNpmInstallImpl } from '../velo-npm/anyNpm.js';\nimport { loadProjectModel } from '../model.js';\nimport { authenticate } from '../authentication.js';\nimport { migrateToAnyNpmIfNeeded } from '../velo-npm/anyNpmMigration.js';\n\nexport async function install(\n  { biLogger, errorReporter }: CommandServices,\n  options: {\n    yarn?: boolean;\n    npm?: boolean;\n  },\n  initialPackageName?: string\n) {\n  const model = await loadProjectModel(cwd());\n  const authState = await authenticate({\n    metaSiteId: model.metaSiteId,\n    biLogger,\n    errorReporter,\n  });\n\n  const t = createI18nT();\n  const logger = createLogger({ t });\n  const packageName = initialPackageName?.trim() ?? null;\n\n  let packageManager: PackageManager;\n  if (options.yarn) {\n    packageManager = 'yarn';\n  } else if (options.npm) {\n    packageManager = 'npm';\n  } else {\n    packageManager = await getDefaultPackageManager(model.projectFolder);\n  }\n\n  await migrateToAnyNpmIfNeeded(model.projectFolder, logger);\n  await anyNpmInstallImpl(\n    packageName,\n    model,\n    authState,\n    packageManager,\n    logger\n  );\n}\n","import type { AuthState } from '@wix/cli-auth';\nimport {\n  installNpmPackage,\n  installAllPackages,\n  resolveNpmDependencies,\n} from '../dependency-manager/index.js';\nimport type { PackageManager } from '../dependency-manager/index.js';\nimport type { Logger } from '../logger.js';\nimport type { ProjectModel } from '../model.js';\n\nexport async function installImpl(\n  packageName: string | null,\n  model: ProjectModel,\n  authState: AuthState,\n  packageManager: PackageManager,\n  logger: Logger\n) {\n  let logInstalled: undefined | (() => void);\n\n  try {\n    if (packageName) {\n      logInstalled = logger.logDependencyInstalling(packageName, null);\n      await installNpmPackage(\n        packageName,\n        null,\n        model.projectFolder,\n        packageManager\n      );\n    } else {\n      logInstalled = logger.logAllDependenciesInstalling();\n      await installAllPackages(model.projectFolder, packageManager);\n    }\n\n    await resolveNpmDependencies(model.projectFolder, { authState });\n  } finally {\n    if (logInstalled) {\n      logInstalled();\n    }\n  }\n}\n","import { getVeloDependenciesConfigPath } from '@wix/cli-site-definitions';\nimport { pathExists } from '@wix/cli-fs';\nimport { unlink } from 'node:fs/promises';\nimport { addDependenciesToPackageJson } from '../files/package-json.js';\nimport { loadDependenciesConfig } from '../files/velo.dependencies.js';\nimport type { Logger } from '../logger.js';\n\nexport const migrateToAnyNpmIfNeeded = async (root: string, logger: Logger) => {\n  const oldDependenciesFilePath = getVeloDependenciesConfigPath(root);\n  if (await pathExists(oldDependenciesFilePath)) {\n    try {\n      logger.logMigratingToAnyNpm();\n\n      const oldVeloDeps = await loadDependenciesConfig(root);\n      await addDependenciesToPackageJson(root, oldVeloDeps);\n      await unlink(oldDependenciesFilePath);\n\n      logger.logMigrationToAnyNpmCompletedSuccessfully();\n    } catch (ex: unknown) {\n      logger.logMigrationToAnyNpmFailed(ex);\n      throw ex;\n    }\n  }\n};\n","import {\n  veloDependenciesConfigSchema,\n  getVeloDependenciesConfigPath,\n  VELO_DEPENDENCIES_CONFIG_PATH,\n} from '@wix/cli-site-definitions';\nimport { readJson } from '@wix/cli-fs';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\n\nexport async function loadDependenciesConfig(projectFolder: string) {\n  const configFile = await readJson(\n    getVeloDependenciesConfigPath(projectFolder)\n  );\n\n  try {\n    return veloDependenciesConfigSchema.parse(configFile);\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.InvalidVeloConfigJson({\n        configFilename: VELO_DEPENDENCIES_CONFIG_PATH,\n        cause: e,\n      }),\n    });\n  }\n}\n"],"mappings":";;k3BAAAA,ICAAC,IAAA,OAAS,OAAAC,MAAW,eCApBC,IAUA,eAAsBC,EACpBC,EACAC,EACAC,EACAC,EACAC,EACA,CACA,IAAIC,EAEJ,GAAI,CACEL,GACFK,EAAeD,EAAO,wBAAwBJ,EAAa,IAAI,EAC/D,MAAMM,EACJN,EACA,KACAC,EAAM,cACNE,CACF,IAEAE,EAAeD,EAAO,6BAA6B,EACnD,MAAMG,EAAmBN,EAAM,cAAeE,CAAc,GAG9D,MAAMK,EAAuBP,EAAM,cAAe,CAAE,UAAAC,CAAU,CAAC,CACjE,QAAE,CACIG,GACFA,EAAa,CAEjB,CACF,CCvCAI,IAEA,OAAS,UAAAC,MAAc,mBCFvBC,IAQA,eAAsBC,EAAuBC,EAAuB,CAClE,IAAMC,EAAa,MAAMC,EACvBC,EAA8BH,CAAa,CAC7C,EAEA,GAAI,CACF,OAAOI,EAA6B,MAAMH,CAAU,CACtD,OAASI,EAAG,CACV,MAAM,IAAIC,EAAS,CACjB,KAAMC,EAAa,sBAAsB,CACvC,eAAgBC,EAChB,MAAOH,CACT,CAAC,CACH,CAAC,CACH,CACF,CDhBO,IAAMI,EAA0B,MAAOC,EAAcC,IAAmB,CAC7E,IAAMC,EAA0BC,EAA8BH,CAAI,EAClE,GAAI,MAAMI,EAAWF,CAAuB,EAC1C,GAAI,CACFD,EAAO,qBAAqB,EAE5B,IAAMI,EAAc,MAAMC,EAAuBN,CAAI,EACrD,MAAMO,EAA6BP,EAAMK,CAAW,EACpD,MAAMG,EAAON,CAAuB,EAEpCD,EAAO,0CAA0C,CACnD,OAASQ,EAAa,CACpB,MAAAR,EAAO,2BAA2BQ,CAAE,EAC9BA,CACR,CAEJ,EFZA,eAAsBC,EACpB,CAAE,SAAAC,EAAU,cAAAC,CAAc,EAC1BC,EAIAC,EACA,CACA,IAAMC,EAAQ,MAAMC,EAAiBC,EAAI,CAAC,EACpCC,EAAY,MAAMC,EAAa,CACnC,WAAYJ,EAAM,WAClB,SAAAJ,EACA,cAAAC,CACF,CAAC,EAEKQ,EAAIC,EAAY,EAChBC,EAASC,EAAa,CAAE,EAAAH,CAAE,CAAC,EAC3BI,EAAcV,GAAoB,KAAK,GAAK,KAE9CW,EACAZ,EAAQ,KACVY,EAAiB,OACRZ,EAAQ,IACjBY,EAAiB,MAEjBA,EAAiB,MAAMC,EAAyBX,EAAM,aAAa,EAGrE,MAAMY,EAAwBZ,EAAM,cAAeO,CAAM,EACzD,MAAMM,EACJJ,EACAT,EACAG,EACAO,EACAH,CACF,CACF","names":["init_esm_shims","init_esm_shims","cwd","init_esm_shims","installImpl","packageName","model","authState","packageManager","logger","logInstalled","installNpmPackage","installAllPackages","resolveNpmDependencies","init_esm_shims","unlink","init_esm_shims","loadDependenciesConfig","projectFolder","configFile","readJson","getVeloDependenciesConfigPath","veloDependenciesConfigSchema","e","CliError","CliErrorCode","VELO_DEPENDENCIES_CONFIG_PATH","migrateToAnyNpmIfNeeded","root","logger","oldDependenciesFilePath","getVeloDependenciesConfigPath","pathExists","oldVeloDeps","loadDependenciesConfig","addDependenciesToPackageJson","unlink","ex","install","biLogger","errorReporter","options","initialPackageName","model","loadProjectModel","cwd","authState","authenticate","t","createI18nT","logger","createLogger","packageName","packageManager","getDefaultPackageManager","migrateToAnyNpmIfNeeded","installImpl"]}