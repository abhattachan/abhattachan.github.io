{"version":3,"sources":["../../../node_modules/imurmurhash/imurmurhash.js"],"sourcesContent":["/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n"],"mappings":";;+CAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,cAAAC,KAWC,UAAU,CACP,IAAIC,EAQJ,SAASC,EAAYC,EAAKC,EAAM,CAC5B,IAAIC,EAAI,gBAAgBH,EAAc,KAAOD,EAM7C,GALAI,EAAE,MAAMD,CAAI,EACR,OAAOD,GAAQ,UAAYA,EAAI,OAAS,GACxCE,EAAE,KAAKF,CAAG,EAGVE,IAAM,KACN,OAAOA,CAEf,CAMAH,EAAY,UAAU,KAAO,SAASC,EAAK,CACvC,IAAIG,EAAIC,EAAIC,EAAGC,EAAKC,EAOpB,OALAA,EAAMP,EAAI,OACV,KAAK,KAAOO,EAEZH,EAAK,KAAK,GACVC,EAAI,EACI,KAAK,IAAK,CACd,IAAK,GAAGD,GAAMG,EAAMF,EAAKL,EAAI,WAAWK,GAAG,EAAI,MAAU,EACzD,IAAK,GAAGD,GAAMG,EAAMF,GAAKL,EAAI,WAAWK,GAAG,EAAI,QAAW,EAAI,EAC9D,IAAK,GAAGD,GAAMG,EAAMF,GAAKL,EAAI,WAAWK,GAAG,EAAI,QAAW,GAAK,EAC/D,IAAK,GACDD,GAAMG,EAAMF,GAAKL,EAAI,WAAWK,CAAC,EAAI,MAAS,GAAK,EACnDD,GAAMG,EAAMF,GAAKL,EAAI,WAAWK,GAAG,EAAI,QAAW,EAAI,CAC9D,CAIA,GAFA,KAAK,IAAOE,EAAM,KAAK,IAAO,EAC9BA,GAAO,KAAK,IACRA,EAAM,EAAG,CAET,IADAJ,EAAK,KAAK,GAENC,EAAMA,EAAK,OAAUA,EAAK,OAAU,WAAc,WAClDA,EAAMA,GAAM,GAAOA,IAAO,GAC1BA,EAAMA,EAAK,OAAUA,EAAK,OAAU,UAAc,WAElDD,GAAMC,EACND,EAAMA,GAAM,GAAOA,IAAO,GAC1BA,EAAMA,EAAK,EAAI,WAAc,WAEzB,EAAAE,GAAKE,IAITH,EAAOJ,EAAI,WAAWK,GAAG,EAAI,OACtBL,EAAI,WAAWK,GAAG,EAAI,QAAW,GACjCL,EAAI,WAAWK,GAAG,EAAI,QAAW,GACxCC,EAAMN,EAAI,WAAWK,GAAG,EACxBD,IAAQE,EAAM,MAAS,IACfA,EAAM,QAAW,EAI7B,OADAF,EAAK,EACG,KAAK,IAAK,CACd,IAAK,GAAGA,IAAOJ,EAAI,WAAWK,EAAI,CAAC,EAAI,QAAW,GAClD,IAAK,GAAGD,IAAOJ,EAAI,WAAWK,EAAI,CAAC,EAAI,QAAW,EAClD,IAAK,GAAGD,GAAOJ,EAAI,WAAWK,CAAC,EAAI,KACvC,CAEA,KAAK,GAAKF,CACd,CAEA,YAAK,GAAKC,EACH,IACX,EAKAL,EAAY,UAAU,OAAS,UAAW,CACtC,IAAIK,EAAID,EAER,OAAAC,EAAK,KAAK,GACVD,EAAK,KAAK,GAENC,EAAK,IACLA,EAAMA,EAAK,OAAUA,EAAK,OAAU,WAAc,WAClDA,EAAMA,GAAM,GAAOA,IAAO,GAC1BA,EAAMA,EAAK,OAAUA,EAAK,OAAU,UAAc,WAClDD,GAAMC,GAGVD,GAAM,KAAK,IAEXA,GAAMA,IAAO,GACbA,EAAMA,EAAK,OAAUA,EAAK,OAAU,WAAc,WAClDA,GAAMA,IAAO,GACbA,EAAMA,EAAK,OAAUA,EAAK,OAAU,WAAc,WAClDA,GAAMA,IAAO,GAENA,IAAO,CAClB,EAKAJ,EAAY,UAAU,MAAQ,SAASE,EAAM,CACzC,YAAK,GAAK,OAAOA,GAAS,SAAWA,EAAO,EAC5C,KAAK,IAAM,KAAK,GAAK,KAAK,IAAM,EACzB,IACX,EAIAH,EAAQ,IAAIC,EAER,OAAOH,EAAW,IAClBA,EAAO,QAAUG,EAEjB,KAAK,YAAcA,CAE3B,GAAE","names":["require_imurmurhash","__commonJSMin","exports","module","init_esm_shims","cache","MurmurHash3","key","seed","m","h1","k1","i","top","len"]}