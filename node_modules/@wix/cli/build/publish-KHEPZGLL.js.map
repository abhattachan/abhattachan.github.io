{"version":3,"sources":["../../cli-site/src/publish/index.ts","../../cli-site/src/publish/publish.ts","../../cli-site/src/pages-types-client/index.ts","../../../node_modules/@wix/ambassador-typok-v1-siterevision/http.impl.ts"],"sourcesContent":["export { publish } from './publish.js';\n","import { URL } from 'node:url';\nimport { cwd, exit } from 'node:process';\nimport { DeploymentOperation } from '@wix/ambassador-velo-apps-v1-app/types';\nimport {\n  getDeploymentPipelineDescription,\n  publishDeployment,\n} from '@wix/ambassador-document-management-editor-deployments-v1-deployment/http';\nimport { DeploymentPipelinesStatus } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\nimport prompts from 'prompts';\nimport { isType } from 'variant';\nimport chalk from 'chalk';\nimport { writeCrashReport } from '@wix/cli-debug-log';\nimport { getDebugLogFilePath } from '@wix/cli-core-definitions';\nimport type { CommandServices } from '@wix/cli-command-contract';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { getDefaultBranch } from '../git/index.js';\nimport {\n  deployGridApp,\n  DeploymentSource,\n  getDeploymentStatus,\n} from '../gridapp/deployApp.js';\nimport { loadProjectModel } from '../model.js';\nimport { getLatestRevision } from '../pages-types-client/index.js';\nimport { httpRequest } from '../http-request.js';\nimport { isSiteNotPublishedError } from '../utils.js';\nimport { createLogger } from '../logger.js';\nimport { createI18nT } from '../i18n.js';\nimport { authenticate } from '../authentication.js';\n\nconst toBaseSiteUrl = (fullUrl: string) => {\n  const url = new URL(fullUrl);\n  return `${url.protocol}//${url.host}${url.pathname}`;\n};\n\nexport async function publish(\n  { biLogger, errorReporter }: CommandServices,\n  options: {\n    source?: 'local' | 'remote';\n    approvePreview?: true;\n    force?: true;\n  }\n) {\n  const model = await loadProjectModel(cwd());\n  const authState = await authenticate({\n    metaSiteId: model.metaSiteId,\n    biLogger,\n    errorReporter,\n  });\n  const t = createI18nT();\n  const logger = createLogger({ t });\n\n  const defaultBranchName = await getDefaultBranch((e) =>\n    writeCrashReport(getDebugLogFilePath(model.projectFolder), e)\n  );\n\n  const whatToPublish = options.source\n    ? { value: options.source }\n    : await prompts(\n        {\n          type: 'select',\n          name: 'value',\n          message: logger.t('publish_command.prompt_what_to_publish'),\n          choices: [\n            {\n              title: chalk.cyan(\n                defaultBranchName\n                  ? logger.t(\n                      'publish_command.prompt_what_to_publish_choice_remote',\n                      {\n                        branchName: defaultBranchName,\n                      }\n                    )\n                  : logger.t(\n                      'publish_command.prompt_what_to_publish_choice_remote_fallback'\n                    )\n              ),\n              value: 'remote',\n            },\n            {\n              title: chalk.cyan(\n                logger.t('publish_command.prompt_what_to_publish_choice_local')\n              ),\n              value: 'local',\n            },\n          ],\n        },\n        {\n          onCancel: () => {\n            logger.logAborting();\n            exit(130 /* SIGINT */);\n          },\n        }\n      );\n\n  const deploymentSource =\n    whatToPublish.value === 'local'\n      ? DeploymentSource.local()\n      : DeploymentSource.remote({});\n\n  let preview;\n  const logPreviewed = logger.logPreviewing();\n\n  try {\n    preview = await deployGridApp({\n      model,\n      operation: DeploymentOperation.RC,\n      source: deploymentSource,\n      authState,\n    });\n\n    logPreviewed.success();\n  } catch (err) {\n    if (isSiteNotPublishedError(err)) {\n      logPreviewed.stop();\n      logger.logPreviewUnsupported();\n    } else {\n      logPreviewed.fail();\n      throw err;\n    }\n  }\n\n  const latestRevision = await getLatestRevision({ authState, logger });\n  const currentRevision = preview?.deployedRevision ?? model.revision;\n\n  logger.logPublishRevision({\n    branchName: defaultBranchName,\n    isLocalDeployment: isType(deploymentSource, DeploymentSource.local),\n    currentRevision,\n    latestRevision,\n    preview,\n  });\n\n  const shouldPublish = options.approvePreview\n    ? { value: true }\n    : await prompts({\n        type: 'confirm',\n        name: 'value',\n        message: logger.t('publish_command.prompt_continue_with_publish'),\n        initial: true,\n      });\n\n  const publish = shouldPublish.value;\n\n  if (publish) {\n    const logDeployed = logger.logDeploying();\n\n    // Use preview as an original deployment, but if preview wasn't created, created GA deploument.\n    // We need this logic in order to support limitation related to publishing unpublished sites.\n    const deployment =\n      preview ??\n      (await deployGridApp({\n        model,\n        authState,\n        operation: DeploymentOperation.GA,\n        source: deploymentSource,\n      }));\n\n    const { deploymentId, deploymentUrl, isPublishPipelineDeployment } =\n      deployment;\n\n    let deploymentStatus;\n    try {\n      deploymentStatus = !isPublishPipelineDeployment\n        ? DeploymentPipelinesStatus.SUCCESS\n        : await getDeploymentStatus({\n            deploymentId,\n            authState,\n          });\n    } catch (err) {\n      logDeployed.fail();\n      throw err;\n    }\n\n    if (deploymentStatus === DeploymentPipelinesStatus.SUCCESS) {\n      logDeployed.success();\n    }\n\n    let skipPipelineCheck;\n    if (deploymentStatus === DeploymentPipelinesStatus.ERROR) {\n      logDeployed.fail();\n\n      try {\n        const { data } = await httpRequest(\n          {\n            type: 'editor',\n            authState,\n          },\n          getDeploymentPipelineDescription({\n            deploymentId: deployment.deploymentId,\n            deploymentPipelinesIds: ['5c696513-2584-4f19-ae0f-a559dd649482'], // Velo Pipeline ID\n          }),\n          { retries: 2 }\n        );\n\n        if (data.pipelinesDescription?.length) {\n          const { pipelinesDescription } = data;\n          logger.logPipelineErrorInformation({ pipelinesDescription });\n        }\n      } catch (err) {\n        throw new CliError({\n          code: CliErrorCode.FailedToGetPipelineErrorInfo(),\n          cause: err,\n        });\n      }\n\n      logger.logForceDeployWarning();\n\n      const shouldSkipPipelineCheck = options.force\n        ? { value: true }\n        : await prompts({\n            type: 'confirm',\n            name: 'value',\n            message: t('publish_command.prompt_publish_with_error'),\n            initial: true,\n          });\n\n      skipPipelineCheck = shouldSkipPipelineCheck.value;\n    }\n\n    if (\n      deploymentStatus === DeploymentPipelinesStatus.SUCCESS ||\n      skipPipelineCheck\n    ) {\n      const logPublished = logger.logPublishing();\n      try {\n        await httpRequest(\n          {\n            type: 'editor',\n            authState,\n          },\n          publishDeployment({\n            deploymentId,\n            skipPipelineCheck,\n          }),\n          { retries: 2 }\n        );\n      } catch (err) {\n        logPublished.fail();\n        throw new CliError({\n          code: CliErrorCode.FailedToPublishDeployment(),\n          cause: err,\n        });\n      }\n\n      logPublished.success({\n        siteUrl: toBaseSiteUrl(deploymentUrl),\n      });\n    }\n  } else {\n    logger.logPublishAborted();\n  }\n}\n","import type { AuthState } from '@wix/cli-auth';\nimport { getSiteRevision } from '@wix/ambassador-typok-v1-siterevision/http';\nimport { httpRequest } from '../http-request.js';\nimport type { Logger } from '../logger.js';\n\nexport const getLatestRevision = async (opts: {\n  authState: AuthState;\n  logger: Logger;\n}) => {\n  try {\n    const pagesResponse = await httpRequest(\n      {\n        type: 'editor',\n        authState: opts.authState,\n      },\n      getSiteRevision({})\n    );\n    return pagesResponse.data.siteRevision?.revision ?? null;\n  } catch (e) {\n    opts.logger.logFailedToGetLatestRevision(e);\n  }\n  return null;\n};\n",null],"mappings":"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","names":["init_esm_shims","init_esm_shims","URL","cwd","exit","import_prompts","import_variant","init_esm_shims","init_esm_shims","_getSiteRevisionRequest","_getSiteRevisionResponse","resolveWixTypokV1SiteRevisionServiceUrl","opts","domainToMappings","resolveUrl","getSiteRevision","payload","_a","serializer","toReq","fromReq","fromRes","__getSiteRevision","host","serializedData","metadata","toURLSearchParams","getLatestRevision","opts","httpRequest","getSiteRevision","e","toBaseSiteUrl","fullUrl","url","URL","publish","biLogger","errorReporter","options","model","loadProjectModel","cwd","authState","authenticate","t","createI18nT","logger","createLogger","defaultBranchName","getDefaultBranch","e","writeCrashReport","getDebugLogFilePath","deploymentSource","prompts","source_default","exit","DeploymentSource","preview","logPreviewed","deployGridApp","DeploymentOperation","err","isSiteNotPublishedError","latestRevision","getLatestRevision","currentRevision","logDeployed","deployment","deploymentId","deploymentUrl","isPublishPipelineDeployment","deploymentStatus","getDeploymentStatus","DeploymentPipelinesStatus","skipPipelineCheck","data","httpRequest","getDeploymentPipelineDescription","pipelinesDescription","CliError","CliErrorCode","logPublished","publishDeployment"]}