{"version":3,"sources":["../../cli-site/src/http-request.ts","../../cli-site/src/logger.ts"],"sourcesContent":["import pRetry from 'p-retry';\nimport type { Options as RetryOptions } from 'p-retry';\nimport type {\n  HttpResponse,\n  RequestOptions,\n  RequestOptionsFactory,\n  CreateHttpClientOptions,\n} from '@wix/cli-http-client';\nimport type { AuthState } from '@wix/cli-auth';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { createHttpClient, isHttpError } from '@wix/cli-http-client';\nimport { getTestOverrides } from '@wix/cli-test-overrides';\n\ntype Options = Pick<CreateHttpClientOptions, 'type'> & {\n  authState?: AuthState;\n};\n\nexport async function httpRequest<T>(\n  { type, authState }: Options,\n  requestOptions: RequestOptions<T> | RequestOptionsFactory<T>,\n  retryOptions?: RetryOptions\n): Promise<HttpResponse<T>> {\n  const { minRetryTimeout } = getTestOverrides();\n  const opts = {\n    type,\n    getAppToken: authState?.getAccessToken,\n    createHeaders: authState?.getRequestHeaders,\n  };\n\n  try {\n    const requestPromise = retryOptions\n      ? pRetry(() => createHttpClient(opts).request(requestOptions), {\n          ...retryOptions,\n          minTimeout: minRetryTimeout,\n        })\n      : createHttpClient(opts).request(requestOptions);\n\n    return await requestPromise;\n  } catch (e) {\n    if (isHttpError(e) && e.response?.status === 403) {\n      throw new CliError({\n        code: CliErrorCode.PermissionDenied(),\n        cause: e,\n      });\n    }\n    throw e;\n  }\n}\n","import { CONFIG_FILENAME } from '@wix/cli-core-definitions';\nimport { createLogger as createCliLogger } from '@wix/cli-logger';\nimport chalk from 'chalk';\nimport terminalLink from 'terminal-link';\nimport type { TFunction } from '@wix/cli-i18n';\nimport type { PipelineDescription } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\n\nexport function createLogger({ t }: { t: TFunction }) {\n  const logger = createCliLogger();\n\n  const logAborting = () => logger.log(chalk.dim(t('general.aborting')));\n\n  const logSyncingLocalCode = () => {\n    const loader = logger.logWithLoader({\n      text: t('dev_command.syncing_local_code_start'),\n      discardStdin: false,\n    });\n\n    return {\n      success: () => {\n        const message = t('dev_command.syncing_local_code_end');\n        loader.succeed(message);\n        return message;\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logUpdatedLocalCodeToRevision = ({\n    revision,\n  }: {\n    revision: string;\n  }) => {\n    const message = t('dev_command.revision_created', {\n      revision,\n      configFileName: CONFIG_FILENAME,\n    });\n    logger.log(message);\n    return message;\n  };\n\n  const logRecoverableFailureToRemoveTypesDir = (error: unknown) => {\n    const cause = getErrorMessage(error);\n\n    logger\n      .logWithLoader(t('dev_command.failed_to_delete_types_dir', { cause }))\n      .fail();\n    logNewLine();\n  };\n\n  const logSyncingTypesToRevision = (revision: string) => {\n    const loader = logger.logWithLoader({\n      text: t('dev_command.syncing_types_to_revision_start', { revision }),\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          t('dev_command.syncing_types_to_revision_end', { revision })\n        );\n      },\n      fail: () => {\n        loader.fail(t('dev_command.syncing_types_to_revision_fail_line1'));\n        logger.log(\n          `  ${t('dev_command.syncing_types_to_revision_fail_line2')}`\n        );\n        logNewLine();\n        logger.log(\n          `  ${t('dev_command.syncing_types_to_revision_fail_line3')}`\n        );\n        logNewLine();\n      },\n    };\n  };\n\n  const logSyncingPagesToRevision = (revision: string) => {\n    const loader = logger.logWithLoader({\n      text: t('dev_command.syncing_pages_to_revision_start', { revision }),\n      discardStdin: false,\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          t('dev_command.syncing_pages_to_revision_end', { revision })\n        );\n      },\n      fail: () => loader.fail(),\n    };\n  };\n\n  const logNewLine = () => logger.log('');\n\n  const logDependencyInstalled = ({\n    dependencyName,\n    dependencyVersion,\n  }: {\n    dependencyName: string;\n    dependencyVersion: string | null;\n  }) =>\n    logger.log(\n      chalk.green(\n        t('dependencies.dependency_installed', {\n          dependency: chalk.bold.green(\n            `${dependencyName}${\n              dependencyVersion ? `@${dependencyVersion}` : ''\n            }`\n          ),\n        })\n      )\n    );\n\n  const logDependencyInstalling = (\n    dependencyName: string,\n    dependencyVersion: string | null\n  ) => {\n    const loader = logger.logWithLoader({\n      text: chalk.yellow(\n        t('dependencies.installing_dependency', {\n          dependency: chalk.bold.yellow(\n            `${dependencyName}${\n              dependencyVersion ? `@${dependencyVersion}` : ''\n            }`\n          ),\n        })\n      ),\n    });\n    return () => {\n      loader.stop();\n      logDependencyInstalled({ dependencyName, dependencyVersion });\n    };\n  };\n\n  const logAllDependenciesInstalled = () =>\n    logger.log(chalk.green(t('dependencies.all_dependencies_installed')));\n\n  const logAllDependenciesInstalling = () => {\n    const loader = logger.logWithLoader({\n      text: chalk.yellow(t('dependencies.installing_all_dependencies')),\n    });\n    return () => {\n      loader.stop();\n      logAllDependenciesInstalled();\n    };\n  };\n\n  const logDependencyUninstalled = ({\n    dependencyName,\n  }: {\n    dependencyName: string;\n  }) =>\n    logger.log(\n      chalk.green(\n        t('dependencies.dependency_uninstalled', {\n          dependency: chalk.bold.green(dependencyName),\n        })\n      )\n    );\n\n  const logDependencyUninstalling = (dependencyName: string) => {\n    const loader = logger.logWithLoader({\n      text: chalk.yellow(\n        t('dependencies.uninstalling_dependency', {\n          dependency: chalk.bold.yellow(dependencyName),\n        })\n      ),\n    });\n    return () => {\n      loader.stop();\n      logDependencyUninstalled({ dependencyName });\n    };\n  };\n\n  const logOpeningBrowser = (https: boolean) => {\n    logger.log(t('dev_command.opening_browser'));\n\n    if (https) {\n      logger.log(t('dev_command.dev_server_url.approve_cert'));\n    }\n  };\n\n  const logNoOpenedTab = (devEditorUrl: string) => {\n    const message = t('dev_command.no_open_editor', {\n      key: chalk.bold.italic('e'),\n      link: devEditorUrl,\n    });\n    logger.log(message);\n    return message;\n  };\n\n  const logPublishRevision = ({\n    branchName,\n    isLocalDeployment,\n    currentRevision,\n    latestRevision,\n    preview,\n  }: {\n    branchName: string | null;\n    isLocalDeployment: boolean;\n    currentRevision: string;\n    latestRevision: string | null;\n    preview:\n      | {\n          deploymentId: string;\n          deploymentUrl: string;\n          deploymentShortUrl?: string | null;\n          deployedRevision: string;\n        }\n      | undefined;\n  }) =>\n    logger.log(`\n  ${\n    !preview\n      ? ''\n      : `${t('publish_command.publish_details_preview')}\n  ${chalk.underline(\n    chalk.blue(preview.deploymentShortUrl ?? preview.deploymentUrl)\n  )}`\n  }\n\n  ${chalk.bold(t('publish_command.publish_details_about_to_publish'))}\n\n    ${\n      isLocalDeployment\n        ? t('publish_command.prompt_what_to_publish_choice_local')\n        : branchName\n        ? t('publish_command.prompt_what_to_publish_choice_remote', {\n            branchName,\n          })\n        : t('publish_command.prompt_what_to_publish_choice_remote_fallback')\n    }\n    ${t('publish_command.publish_details_ui_version', {\n      revision: currentRevision,\n    })}\n    ${\n      latestRevision && +latestRevision > +currentRevision\n        ? `\\n  ${chalk.red(\n            `${chalk.bold(\n              t(\n                'publish_command.publish_details_newer_editor_version_caution_title'\n              )\n            )}: ${t(\n              'publish_command.publish_details_newer_editor_version_caution_details'\n            )} ${chalk.underline(\n              chalk.blue(\n                terminalLink(\n                  t(\n                    'publish_command.publish_details_newer_editor_version_link_text'\n                  ),\n                  t(\n                    'publish_command.publish_details_newer_editor_version_link_url'\n                  )\n                )\n              )\n            )}`\n          )}\\n`\n        : ''\n    }\n    ${\n      isLocalDeployment\n        ? chalk.red(\n            `${chalk.bold(\n              t('publish_command.publish_details_local_caution_title')\n            )}: ${t('publish_command.publish_details_local_caution_details')}\\n`\n          )\n        : ''\n    }`);\n\n  const logPipelineErrorInformation = ({\n    pipelinesDescription,\n  }: {\n    pipelinesDescription: PipelineDescription[];\n  }) => {\n    const errorBadge = t('publish_command.publish_pipeline_error_badge');\n    const taskDone = chalk.green(t('publish_command.generic_task_done'));\n    const taskFailed = chalk.red(t('publish_command.generic_task_failed'));\n    const divider = '-'.repeat(30);\n    const padding = '  ';\n\n    const normalizeText = (text: string) => {\n      return text\n        .split('\\n')\n        .map((line, index) => {\n          if (line.trim() && index) {\n            return `${padding}${line}`;\n          }\n\n          return line;\n        })\n        .join('\\n');\n    };\n\n    let output = '';\n\n    output += `\\n${chalk.red(errorBadge)} ${t(\n      'publish_command.publish_pipeline_error_title'\n    )}\\n`;\n    output += `\\n${divider}\\n`;\n    output += `Status: ${taskFailed}`;\n\n    pipelinesDescription[0]?.tasksDescriptions?.forEach((task) => {\n      output += `\\n\\n* ${task.taskName}... ${\n        task.status === 'ERROR' ? `${taskFailed}:` : taskDone\n      }\\n`;\n\n      if (task.description) {\n        const errorDescription = JSON.parse(task.description);\n\n        for (const fileName in errorDescription) {\n          output += `\\n${padding}${errorBadge} ${fileName} | `;\n          output += normalizeText(errorDescription[fileName].toString());\n        }\n      }\n    });\n\n    output += `\\n${divider}`;\n\n    logger.log(output);\n  };\n\n  const logPublishing = () => {\n    const loader = logger.logWithLoader({\n      text: t('publish_command.publishing'),\n      discardStdin: false,\n    });\n\n    return {\n      success: ({ siteUrl }: { siteUrl: string }) => {\n        loader.succeed(\n          t('publish_command.published', {\n            url: chalk.underline(chalk.blue(siteUrl)),\n          })\n        );\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logDeploying = () => {\n    const loader = logger.logWithLoader({\n      text: t('publish_command.deploying'),\n      discardStdin: false,\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          `${t('publish_command.deploying')} ${chalk.green(\n            t('publish_command.generic_task_done')\n          )}`\n        );\n      },\n      fail: () =>\n        loader.fail(\n          `${t('publish_command.deploying')} ${chalk.red(\n            t('publish_command.generic_task_failed')\n          )}`\n        ),\n    };\n  };\n\n  const logForceDeployWarning = () =>\n    logger.log(\n      chalk.red(\n        `${chalk.bold(\n          t('publish_command.publish_with_errors_caution_title')\n        )}: ${t('publish_command.publish_with_errors_caution_details')}\\n`\n      )\n    );\n\n  const logPublishAborted = () =>\n    logger.log(`\\n${t('publish_command.publish_aborted')}`);\n\n  const logCreatingPreview = () =>\n    logger.log(`\\n${t('preview_command.creating_preview')}\\n`);\n\n  const logPreviewCreated = (url: string) =>\n    logger.log(t('preview_command.preview_created', { url: chalk.green(url) }));\n\n  const logPreviewUnsupported = () =>\n    logger.log(t('preview_command.preview_unsupported'));\n\n  const logFailedToGetLatestRevision = (error: unknown) => {\n    const cause = error instanceof Error ? error.stack : error;\n    logger.log(t('publish_command.failed_getting_latest_revision', { cause }));\n  };\n\n  const logMigratingToAnyNpm = () => {\n    logger.log(t('install_command.migrating_to_any_npm') + '\\n');\n    logger.log(\n      chalk.yellow(t('install_command.starting_migrating_to_any_npm'))\n    );\n  };\n\n  const logMigrationToAnyNpmCompletedSuccessfully = () =>\n    logger.log(chalk.green(t('install_command.migration_to_any_npm_success')));\n\n  const logMigrationToAnyNpmFailed = (error: unknown) => {\n    const cause = getErrorMessage(error);\n    logger.log(\n      chalk.red(t('install_command.migration_to_any_npm_failed', { cause }))\n    );\n  };\n\n  const logPreviewing = () => {\n    const loader = logger.logWithLoader({\n      text: t('publish_command.creating_preview'),\n      discardStdin: false,\n    });\n\n    return {\n      success: () =>\n        loader.succeed(t('publish_command.creating_preview_success')),\n      fail: () => loader.fail(t('publish_command.creating_preview_failed')),\n      stop: () => loader.stop(),\n    };\n  };\n  const logWmlChangesRecieved = (pageIds: string[]) =>\n    logger.log(chalk.green(`WML changes recieved for ${pageIds.join(',')}`));\n\n  const logWmlLocalFilesChangedForPage = (pageId: string) =>\n    logger.log(\n      chalk.green(\n        `Detected changes to local WML for ${pageId}, updating editor...`\n      )\n    );\n\n  const logWmlWriteResult = ({\n    skip,\n    write,\n  }: {\n    skip: string[];\n    write: string[];\n  }) =>\n    logger.log(\n      chalk.green(\n        `Performed WML save to disk: wrote ${write.length} files. ${\n          skip.length > 0\n            ? `Skipped ${skip.length} files because there were no changes.`\n            : ''\n        }`\n      )\n    );\n\n  return {\n    t,\n    logAborting,\n    logSyncingLocalCode,\n    logRecoverableFailureToRemoveTypesDir,\n    logUpdatedLocalCodeToRevision,\n    logSyncingPagesToRevision,\n    logSyncingTypesToRevision,\n    logDependencyInstalling,\n    logDependencyUninstalling,\n    logAllDependenciesInstalling,\n    logOpeningBrowser,\n    logNoOpenedTab,\n    logPublishRevision,\n    logPublishing,\n    logPublishAborted,\n    logCreatingPreview,\n    logPreviewCreated,\n    logPreviewUnsupported,\n    logNewLine,\n    logFailedToGetLatestRevision,\n    logMigratingToAnyNpm,\n    logMigrationToAnyNpmCompletedSuccessfully,\n    logMigrationToAnyNpmFailed,\n    logDeploying,\n    logForceDeployWarning,\n    logPipelineErrorInformation,\n    logPreviewing,\n    logWmlChangesRecieved,\n    logWmlLocalFilesChangedForPage,\n    logWmlWriteResult,\n  };\n}\n\nfunction getErrorMessage(cause: unknown) {\n  return cause instanceof Error ? cause.message : JSON.stringify(cause);\n}\n\nexport type Logger = ReturnType<typeof createLogger>;\n"],"mappings":"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","names":["init_esm_shims","httpRequest","type","authState","requestOptions","retryOptions","minRetryTimeout","getTestOverrides","opts","pRetry","createHttpClient","e","isHttpError","CliError","CliErrorCode","init_esm_shims","createLogger","t","logger","logAborting","source_default","logSyncingLocalCode","loader","message","logUpdatedLocalCodeToRevision","revision","CONFIG_FILENAME","logRecoverableFailureToRemoveTypesDir","error","cause","getErrorMessage","logNewLine","logSyncingTypesToRevision","logSyncingPagesToRevision","logDependencyInstalled","dependencyName","dependencyVersion","logDependencyInstalling","logAllDependenciesInstalled","logAllDependenciesInstalling","logDependencyUninstalled","https","devEditorUrl","branchName","isLocalDeployment","currentRevision","latestRevision","preview","terminalLink","siteUrl","url","pipelinesDescription","errorBadge","taskDone","taskFailed","divider","padding","normalizeText","text","line","index","output","task","errorDescription","fileName","pageIds","pageId","skip","write"]}