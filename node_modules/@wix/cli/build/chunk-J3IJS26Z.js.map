{"version":3,"sources":["../../../node_modules/@opentelemetry/api/src/platform/node/globalThis.ts","../../../node_modules/@opentelemetry/api/src/platform/node/index.ts","../../../node_modules/@opentelemetry/api/src/platform/index.ts","../../../node_modules/@opentelemetry/api/src/version.ts","../../../node_modules/@opentelemetry/api/src/internal/semver.ts","../../../node_modules/@opentelemetry/api/src/internal/global-utils.ts","../../../node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts","../../../node_modules/@opentelemetry/api/src/diag/types.ts","../../../node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts","../../../node_modules/@opentelemetry/api/src/api/diag.ts","../../../node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts","../../../node_modules/@opentelemetry/api/src/baggage/internal/symbol.ts","../../../node_modules/@opentelemetry/api/src/baggage/utils.ts","../../../node_modules/@opentelemetry/api/src/context/context.ts","../../../node_modules/@opentelemetry/api/src/diag/consoleLogger.ts","../../../node_modules/@opentelemetry/api/src/metrics/NoopMeter.ts","../../../node_modules/@opentelemetry/api/src/metrics/Metric.ts","../../../node_modules/@opentelemetry/api/src/propagation/TextMapPropagator.ts","../../../node_modules/@opentelemetry/api/src/context/NoopContextManager.ts","../../../node_modules/@opentelemetry/api/src/api/context.ts","../../../node_modules/@opentelemetry/api/src/trace/trace_flags.ts","../../../node_modules/@opentelemetry/api/src/trace/invalid-span-constants.ts","../../../node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts","../../../node_modules/@opentelemetry/api/src/trace/context-utils.ts","../../../node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts","../../../node_modules/@opentelemetry/api/src/trace/NoopTracer.ts","../../../node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts","../../../node_modules/@opentelemetry/api/src/trace/NoopTracerProvider.ts","../../../node_modules/@opentelemetry/api/src/trace/ProxyTracerProvider.ts","../../../node_modules/@opentelemetry/api/src/trace/SamplingResult.ts","../../../node_modules/@opentelemetry/api/src/trace/span_kind.ts","../../../node_modules/@opentelemetry/api/src/trace/status.ts","../../../node_modules/@opentelemetry/api/src/trace/internal/tracestate-validators.ts","../../../node_modules/@opentelemetry/api/src/trace/internal/tracestate-impl.ts","../../../node_modules/@opentelemetry/api/src/trace/internal/utils.ts","../../../node_modules/@opentelemetry/api/src/context-api.ts","../../../node_modules/@opentelemetry/api/src/diag-api.ts","../../../node_modules/@opentelemetry/api/src/metrics/NoopMeterProvider.ts","../../../node_modules/@opentelemetry/api/src/api/metrics.ts","../../../node_modules/@opentelemetry/api/src/metrics-api.ts","../../../node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts","../../../node_modules/@opentelemetry/api/src/baggage/context-helpers.ts","../../../node_modules/@opentelemetry/api/src/api/propagation.ts","../../../node_modules/@opentelemetry/api/src/propagation-api.ts","../../../node_modules/@opentelemetry/api/src/api/trace.ts","../../../node_modules/@opentelemetry/api/src/trace-api.ts","../../../node_modules/@opentelemetry/api/src/index.ts","../../../node_modules/@opentelemetry/semantic-conventions/src/internal/utils.ts","../../../node_modules/@opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts","../../../node_modules/@opentelemetry/semantic-conventions/src/trace/index.ts","../../../node_modules/@opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts","../../../node_modules/@opentelemetry/semantic-conventions/src/resource/index.ts","../../../node_modules/@opentelemetry/semantic-conventions/src/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './globalThis';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.9.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface DiagLoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param options - A {@link DiagLoggerOptions} object. If not provided, default values will be set.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, options?: DiagLoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogger, DiagLogFunction } from './types';\n\ntype ConsoleMapKeys = 'error' | 'warn' | 'info' | 'debug' | 'trace';\nconst consoleMap: { n: keyof DiagLogger; c: ConsoleMapKeys }[] = [\n  { n: 'error', c: 'error' },\n  { n: 'warn', c: 'warn' },\n  { n: 'info', c: 'info' },\n  { n: 'debug', c: 'debug' },\n  { n: 'verbose', c: 'trace' },\n];\n\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nexport class DiagConsoleLogger implements DiagLogger {\n  constructor() {\n    function _consoleFunc(funcName: ConsoleMapKeys): DiagLogFunction {\n      return function (...args) {\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          let theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n\n    for (let i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  public error!: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  public warn!: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  public info!: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario. Useful scenarios would be to log the execution\n   * order of async operations\n   */\n  public debug!: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  public verbose!: DiagLogFunction;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Gauge,\n  Histogram,\n  MetricAttributes,\n  MetricOptions,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createGauge}\n   */\n  createGauge(_name: string, _options?: MetricOptions): Gauge {\n    return NOOP_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopGaugeMetric extends NoopMetric implements Gauge {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue } from '../common/Attributes';\nimport { Context } from '../context/types';\nimport { BatchObservableResult, ObservableResult } from './ObservableResult';\n\n/**\n * Advisory options influencing aggregation configuration parameters.\n * @experimental\n */\nexport interface MetricAdvice {\n  /**\n   * Hint the explicit bucket boundaries for SDK if the metric is been\n   * aggregated with a HistogramAggregator.\n   */\n  explicitBucketBoundaries?: number[];\n}\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default ''\n   */\n  unit?: string;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n\n  /**\n   * The advice influencing aggregation configuration parameters.\n   * @experimental\n   */\n  advice?: MetricAdvice;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs must not be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface UpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Gauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Records a measurement.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Histogram<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\n/**\n * @deprecated please use {@link Attributes}\n */\nexport type MetricAttributes = Attributes;\n\n/**\n * @deprecated please use {@link AttributeValue}\n */\nexport type MetricAttributeValue = AttributeValue;\n\n/**\n * The observable callback for Observable instruments.\n */\nexport type ObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: ObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\n/**\n * The observable callback for a batch of Observable instruments.\n */\nexport type BatchObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: BatchObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\nexport interface Observable<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Sets up a function that will be called whenever a metric collection is initiated.\n   *\n   * If the function is already in the list of callbacks for this Observable, the function is not added a second time.\n   */\n  addCallback(callback: ObservableCallback<AttributesTypes>): void;\n\n  /**\n   * Removes a callback previously registered with {@link Observable.addCallback}.\n   */\n  removeCallback(callback: ObservableCallback<AttributesTypes>): void;\n}\n\nexport type ObservableCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableUpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableGauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum TraceFlags {\n  /** Represents no flag set. */\n  NONE = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1 << 0,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\nimport { Link } from './link';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  addLink(_link: Link): this {\n    return this;\n  }\n\n  addLinks(_links: Link[]): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\nimport { TraceState } from './trace_state';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { validateKey, validateValue } from './tracestate-validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceStateImpl implements TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceStateImpl {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceStateImpl {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceStateImpl {\n    const traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { TraceStateImpl } from './tracestate-impl';\n\nexport function createTraceState(rawTraceState?: string): TraceState {\n  return new TraceStateImpl(rawTraceState);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport const context = ContextAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from './Meter';\nimport { MeterProvider } from './MeterProvider';\nimport { NOOP_METER } from './NoopMeter';\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nexport class NoopMeterProvider implements MeterProvider {\n  getMeter(_name: string, _version?: string, _options?: MeterOptions): Meter {\n    return NOOP_METER;\n  }\n}\n\nexport const NOOP_METER_PROVIDER = new NoopMeterProvider();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport const metrics = MetricsAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport const trace = TraceAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BaggageEntry, BaggageEntryMetadata, Baggage } from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport { Exception } from './common/Exception';\nexport { HrTime, TimeInput } from './common/Time';\nexport { Attributes, AttributeValue } from './common/Attributes';\n\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\nexport { Context, ContextManager } from './context/types';\nexport type { ContextAPI } from './api/context';\n\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport {\n  DiagLogFunction,\n  DiagLogger,\n  DiagLogLevel,\n  ComponentLoggerOptions,\n  DiagLoggerOptions,\n} from './diag/types';\nexport type { DiagAPI } from './api/diag';\n\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { MeterOptions, Meter } from './metrics/Meter';\nexport { MeterProvider } from './metrics/MeterProvider';\nexport {\n  ValueType,\n  Counter,\n  Gauge,\n  Histogram,\n  MetricOptions,\n  Observable,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  BatchObservableCallback,\n  MetricAdvice,\n  MetricAttributes,\n  MetricAttributeValue,\n  ObservableCallback,\n} from './metrics/Metric';\nexport {\n  BatchObservableResult,\n  ObservableResult,\n} from './metrics/ObservableResult';\nexport type { MetricsAPI } from './api/metrics';\n\n// Propagation APIs\nexport {\n  TextMapPropagator,\n  TextMapSetter,\n  TextMapGetter,\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n} from './propagation/TextMapPropagator';\nexport type { PropagationAPI } from './api/propagation';\n\n// Trace APIs\nexport { SpanAttributes, SpanAttributeValue } from './trace/attributes';\nexport { Link } from './trace/link';\nexport { ProxyTracer, TracerDelegator } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { Sampler } from './trace/Sampler';\nexport { SamplingDecision, SamplingResult } from './trace/SamplingResult';\nexport { SpanContext } from './trace/span_context';\nexport { SpanKind } from './trace/span_kind';\nexport { Span } from './trace/span';\nexport { SpanOptions } from './trace/SpanOptions';\nexport { SpanStatus, SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { TraceState } from './trace/trace_state';\nexport { createTraceState } from './trace/internal/utils';\nexport { TracerProvider } from './trace/tracer_provider';\nexport { Tracer } from './trace/tracer';\nexport { TracerOptions } from './trace/tracer_options';\nexport {\n  isSpanContextValid,\n  isValidTraceId,\n  isValidSpanId,\n} from './trace/spancontext-utils';\nexport {\n  INVALID_SPANID,\n  INVALID_TRACEID,\n  INVALID_SPAN_CONTEXT,\n} from './trace/invalid-span-constants';\nexport type { TraceAPI } from './api/trace';\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n  context,\n  diag,\n  metrics,\n  propagation,\n  trace,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function createConstMap<T>(values: Array<T[keyof T]>): T {\n  // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n  let res: any = {};\n  const len = values.length;\n  for (let lp = 0; lp < len; lp++) {\n    const val = values[lp];\n    if (val) {\n      res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;\n    }\n  }\n\n  return res as T;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createConstMap } from '../internal/utils';\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT =\n  'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n  'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n  'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS =\n  'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY =\n  'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY =\n  'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES =\n  'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES =\n  'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE =\n  'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS =\n  'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES =\n  'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n  'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n  'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n */\nexport const SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n */\nexport const SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n\n/**\n * Username for accessing the database.\n */\nexport const SEMATTRS_DB_USER = TMP_DB_USER;\n\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n */\nexport const SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n */\nexport const SEMATTRS_DB_NAME = TMP_DB_NAME;\n\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n */\nexport const SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n */\nexport const SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n */\nexport const SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n */\nexport const SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n */\nexport const SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL =\n  TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n */\nexport const SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n\n/**\n * Whether or not the query is idempotent.\n */\nexport const SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n */\nexport const SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT =\n  TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n\n/**\n * The ID of the coordinating node for a query.\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_ID =\n  TMP_DB_CASSANDRA_COORDINATOR_ID;\n\n/**\n * The data center of the coordinating node for a query.\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_DC =\n  TMP_DB_CASSANDRA_COORDINATOR_DC;\n\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n */\nexport const SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n */\nexport const SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n\n/**\n * The collection being accessed within the database stated in `db.name`.\n */\nexport const SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n */\nexport const SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n */\nexport const SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n\n/**\n * The exception message.\n */\nexport const SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n */\nexport const SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*/\nexport const SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n\n/**\n * The execution ID of the current function execution.\n */\nexport const SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n */\nexport const SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n */\nexport const SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n */\nexport const SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n */\nexport const SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n */\nexport const SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n */\nexport const SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n */\nexport const SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n */\nexport const SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n\n/**\n * Remote port number.\n */\nexport const SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n\n/**\n * Remote hostname or similar, see note below.\n */\nexport const SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n */\nexport const SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n\n/**\n * Like `net.peer.port` but for the host port.\n */\nexport const SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n\n/**\n * Local hostname or similar, see note below.\n */\nexport const SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_SUBTYPE =\n  TMP_NET_HOST_CONNECTION_SUBTYPE;\n\n/**\n * The name of the mobile carrier.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n\n/**\n * The mobile carrier country code.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n\n/**\n * The mobile carrier network code.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n */\nexport const SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n */\nexport const SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n */\nexport const SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n */\nexport const SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n */\nexport const SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n\n/**\n * Current thread name.\n */\nexport const SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n */\nexport const SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n */\nexport const SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n */\nexport const SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n */\nexport const SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n\n/**\n * HTTP request method.\n */\nexport const SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n */\nexport const SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n */\nexport const SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n */\nexport const SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n\n/**\n * The URI scheme identifying the used protocol.\n */\nexport const SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n */\nexport const SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n */\nexport const SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH =\n  TMP_HTTP_REQUEST_CONTENT_LENGTH;\n\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n  TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH =\n  TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n  TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n */\nexport const SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n\n/**\n * The matched route (path template).\n */\nexport const SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*/\nexport const SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n\n/**\n * The keys in the `RequestItems` object field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY =\n  TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS =\n  TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY =\n  TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY =\n  TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n\n/**\n * The value of the `ConsistentRead` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ =\n  TMP_AWS_DYNAMODB_CONSISTENT_READ;\n\n/**\n * The value of the `ProjectionExpression` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n\n/**\n * The value of the `Limit` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n\n/**\n * The value of the `AttributesToGet` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET =\n  TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n\n/**\n * The value of the `IndexName` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n\n/**\n * The value of the `Select` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES =\n  TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES =\n  TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE =\n  TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n\n/**\n * The the number of items in the `TableNames` response parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n\n/**\n * The value of the `ScanIndexForward` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n\n/**\n * The value of the `Segment` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n\n/**\n * The value of the `TotalSegments` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS =\n  TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n\n/**\n * The value of the `Count` response parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n\n/**\n * The value of the `ScannedCount` response parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT =\n  TMP_AWS_DYNAMODB_SCANNED_COUNT;\n\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS =\n  TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES =\n  TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n\n/**\n * A string identifying the messaging system.\n */\nexport const SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n\n/**\n * The kind of message destination.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION_KIND =\n  TMP_MESSAGING_DESTINATION_KIND;\n\n/**\n * A boolean that is true if the message destination is temporary.\n */\nexport const SEMATTRS_MESSAGING_TEMP_DESTINATION =\n  TMP_MESSAGING_TEMP_DESTINATION;\n\n/**\n * The name of the transport protocol.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n\n/**\n * The version of the transport protocol.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL_VERSION =\n  TMP_MESSAGING_PROTOCOL_VERSION;\n\n/**\n * Connection string.\n */\nexport const SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n */\nexport const SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n  TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n\n/**\n * The compressed size of the message payload in bytes.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n  TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport const SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n */\nexport const SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n\n/**\n * RabbitMQ message routing key.\n */\nexport const SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY =\n  TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY =\n  TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP =\n  TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n\n/**\n * Partition the message is sent to.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n\n/**\n * A boolean that is true if the message is a tombstone.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n\n/**\n * A string identifying the remoting system.\n */\nexport const SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n */\nexport const SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n */\nexport const SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n */\nexport const SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n */\nexport const SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n\n/**\n * `error.code` property of response if it is an error response.\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n\n/**\n * `error.message` property of response if it is an error response.\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n\n/**\n * Whether this is a received or sent message.\n */\nexport const SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n */\nexport const SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n\n/**\n * Compressed size of the message in bytes.\n */\nexport const SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n\n/**\n * Uncompressed size of the message in bytes.\n */\nexport const SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n\n/**\n * Definition of available values for SemanticAttributes\n * This type is used for backward compatibility, you should use the individual exported\n * constants SemanticAttributes_XXXXX rather than the exported constant map. As any single reference\n * to a constant map value will result in all strings being included into your bundle.\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification.\n */\nexport type SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn';\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system';\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string';\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user';\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname';\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name';\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement';\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation';\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name';\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace';\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size';\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level';\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table';\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence';\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count';\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id';\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc';\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace';\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index';\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection';\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table';\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type';\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message';\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace';\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped';\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger';\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution';\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection';\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation';\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time';\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name';\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time';\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron';\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart';\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name';\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider';\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region';\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport';\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip';\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port';\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name';\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip';\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port';\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name';\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type';\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype';\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name';\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc';\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc';\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc';\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service';\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id';\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role';\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope';\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id';\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name';\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function';\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace';\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath';\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno';\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method';\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url';\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target';\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host';\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme';\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code';\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor';\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent';\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length';\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed';\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length';\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed';\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name';\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route';\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip';\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names';\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity';\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics';\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity';\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity';\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read';\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection';\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit';\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get';\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name';\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select';\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes';\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes';\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table';\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count';\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward';\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment';\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments';\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count';\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count';\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions';\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates';\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system';\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination';\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind';\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination';\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol';\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version';\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url';\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id';\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id';\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes';\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes';\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation';\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id';\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key';\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key';\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group';\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id';\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition';\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone';\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system';\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service';\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method';\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code';\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version';\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id';\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code';\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message';\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type';\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id';\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size';\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size';\n};\n\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport const SemanticAttributes: SemanticAttributes =\n  /*#__PURE__*/ createConstMap<SemanticAttributes>([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n\n/**\n * Identifies the Values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport type DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql';\n\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql';\n\n  /** MySQL. */\n  MYSQL: 'mysql';\n\n  /** Oracle Database. */\n  ORACLE: 'oracle';\n\n  /** IBM Db2. */\n  DB2: 'db2';\n\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql';\n\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift';\n\n  /** Apache Hive. */\n  HIVE: 'hive';\n\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape';\n\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb';\n\n  /** Progress Database. */\n  PROGRESS: 'progress';\n\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb';\n\n  /** SAP HANA. */\n  HANADB: 'hanadb';\n\n  /** Ingres. */\n  INGRES: 'ingres';\n\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql';\n\n  /** EnterpriseDB. */\n  EDB: 'edb';\n\n  /** InterSystems Caché. */\n  CACHE: 'cache';\n\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas';\n\n  /** Firebird. */\n  FIREBIRD: 'firebird';\n\n  /** Apache Derby. */\n  DERBY: 'derby';\n\n  /** FileMaker. */\n  FILEMAKER: 'filemaker';\n\n  /** Informix. */\n  INFORMIX: 'informix';\n\n  /** InstantDB. */\n  INSTANTDB: 'instantdb';\n\n  /** InterBase. */\n  INTERBASE: 'interbase';\n\n  /** MariaDB. */\n  MARIADB: 'mariadb';\n\n  /** Netezza. */\n  NETEZZA: 'netezza';\n\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive';\n\n  /** PointBase. */\n  POINTBASE: 'pointbase';\n\n  /** SQLite. */\n  SQLITE: 'sqlite';\n\n  /** Sybase. */\n  SYBASE: 'sybase';\n\n  /** Teradata. */\n  TERADATA: 'teradata';\n\n  /** Vertica. */\n  VERTICA: 'vertica';\n\n  /** H2. */\n  H2: 'h2';\n\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion';\n\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra';\n\n  /** Apache HBase. */\n  HBASE: 'hbase';\n\n  /** MongoDB. */\n  MONGODB: 'mongodb';\n\n  /** Redis. */\n  REDIS: 'redis';\n\n  /** Couchbase. */\n  COUCHBASE: 'couchbase';\n\n  /** CouchDB. */\n  COUCHDB: 'couchdb';\n\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb';\n\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb';\n\n  /** Neo4j. */\n  NEO4J: 'neo4j';\n\n  /** Apache Geode. */\n  GEODE: 'geode';\n\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch';\n\n  /** Memcached. */\n  MEMCACHED: 'memcached';\n\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb';\n};\n\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport const DbSystemValues: DbSystemValues =\n  /*#__PURE__*/ createConstMap<DbSystemValues>([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ALL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ONE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_TWO =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_THREE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ANY =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n\n/**\n * Identifies the Values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport type DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all';\n\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum';\n\n  /** quorum. */\n  QUORUM: 'quorum';\n\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum';\n\n  /** one. */\n  ONE: 'one';\n\n  /** two. */\n  TWO: 'two';\n\n  /** three. */\n  THREE: 'three';\n\n  /** local_one. */\n  LOCAL_ONE: 'local_one';\n\n  /** any. */\n  ANY: 'any';\n\n  /** serial. */\n  SERIAL: 'serial';\n\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial';\n};\n\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport const DbCassandraConsistencyLevelValues: DbCassandraConsistencyLevelValues =\n  /*#__PURE__*/ createConstMap<DbCassandraConsistencyLevelValues>([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n\n/**\n * Identifies the Values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport type FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource';\n\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http';\n\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub';\n\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer';\n\n  /** If none of the others apply. */\n  OTHER: 'other';\n};\n\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport const FaasTriggerValues: FaasTriggerValues =\n  /*#__PURE__*/ createConstMap<FaasTriggerValues>([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const FAASDOCUMENTOPERATIONVALUES_INSERT =\n  TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const FAASDOCUMENTOPERATIONVALUES_EDIT =\n  TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const FAASDOCUMENTOPERATIONVALUES_DELETE =\n  TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n\n/**\n * Identifies the Values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport type FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert';\n\n  /** When an object is modified. */\n  EDIT: 'edit';\n\n  /** When an object is deleted. */\n  DELETE: 'delete';\n};\n\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport const FaasDocumentOperationValues: FaasDocumentOperationValues =\n  /*#__PURE__*/ createConstMap<FaasDocumentOperationValues>([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD =\n  TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_AZURE =\n  TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n\n/**\n * Identifies the Values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport type FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud';\n\n  /** Amazon Web Services. */\n  AWS: 'aws';\n\n  /** Microsoft Azure. */\n  AZURE: 'azure';\n\n  /** Google Cloud Platform. */\n  GCP: 'gcp';\n};\n\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport const FaasInvokedProviderValues: FaasInvokedProviderValues =\n  /*#__PURE__*/ createConstMap<FaasInvokedProviderValues>([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n\n/**\n * Identifies the Values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport type NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp';\n\n  /** ip_udp. */\n  IP_UDP: 'ip_udp';\n\n  /** Another IP-based protocol. */\n  IP: 'ip';\n\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix';\n\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe';\n\n  /** In-process communication. */\n  INPROC: 'inproc';\n\n  /** Something else (non IP-based). */\n  OTHER: 'other';\n};\n\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport const NetTransportValues: NetTransportValues =\n  /*#__PURE__*/ createConstMap<NetTransportValues>([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIFI =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIRED =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_CELL =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNKNOWN =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n\n/**\n * Identifies the Values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport type NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi';\n\n  /** wired. */\n  WIRED: 'wired';\n\n  /** cell. */\n  CELL: 'cell';\n\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable';\n\n  /** unknown. */\n  UNKNOWN: 'unknown';\n};\n\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionTypeValues: NetHostConnectionTypeValues =\n  /*#__PURE__*/ createConstMap<NetHostConnectionTypeValues>([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GPRS =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EDGE =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_UMTS =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IDEN =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GSM =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NR =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n\n/**\n * Identifies the Values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport type NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs';\n\n  /** EDGE. */\n  EDGE: 'edge';\n\n  /** UMTS. */\n  UMTS: 'umts';\n\n  /** CDMA. */\n  CDMA: 'cdma';\n\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0';\n\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a';\n\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt';\n\n  /** HSDPA. */\n  HSDPA: 'hsdpa';\n\n  /** HSUPA. */\n  HSUPA: 'hsupa';\n\n  /** HSPA. */\n  HSPA: 'hspa';\n\n  /** IDEN. */\n  IDEN: 'iden';\n\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b';\n\n  /** LTE. */\n  LTE: 'lte';\n\n  /** EHRPD. */\n  EHRPD: 'ehrpd';\n\n  /** HSPAP. */\n  HSPAP: 'hspap';\n\n  /** GSM. */\n  GSM: 'gsm';\n\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma';\n\n  /** IWLAN. */\n  IWLAN: 'iwlan';\n\n  /** 5G NR (New Radio). */\n  NR: 'nr';\n\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa';\n\n  /** LTE CA. */\n  LTE_CA: 'lte_ca';\n};\n\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionSubtypeValues: NetHostConnectionSubtypeValues =\n  /*#__PURE__*/ createConstMap<NetHostConnectionSubtypeValues>([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n\n/**\n * Identifies the Values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport type HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0';\n\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1';\n\n  /** HTTP 2. */\n  HTTP_2_0: '2.0';\n\n  /** SPDY protocol. */\n  SPDY: 'SPDY';\n\n  /** QUIC protocol. */\n  QUIC: 'QUIC';\n};\n\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport const HttpFlavorValues: HttpFlavorValues = {\n  HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n  HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n  HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n  SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n  QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n\n/**\n * The kind of message destination.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_QUEUE =\n  TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n\n/**\n * The kind of message destination.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_TOPIC =\n  TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n\n/**\n * Identifies the Values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport type MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue';\n\n  /** A message sent to a topic. */\n  TOPIC: 'topic';\n};\n\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport const MessagingDestinationKindValues: MessagingDestinationKindValues =\n  /*#__PURE__*/ createConstMap<MessagingDestinationKindValues>([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport const MESSAGINGOPERATIONVALUES_RECEIVE =\n  TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport const MESSAGINGOPERATIONVALUES_PROCESS =\n  TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n\n/**\n * Identifies the Values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport type MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive';\n\n  /** process. */\n  PROCESS: 'process';\n};\n\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport const MessagingOperationValues: MessagingOperationValues =\n  /*#__PURE__*/ createConstMap<MessagingOperationValues>([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_CANCELLED =\n  TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNKNOWN =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT =\n  TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED =\n  TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_NOT_FOUND =\n  TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS =\n  TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED =\n  TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION =\n  TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_ABORTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE =\n  TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_INTERNAL =\n  TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAVAILABLE =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_DATA_LOSS =\n  TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n\n/**\n * Identifies the Values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport type RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0;\n\n  /** CANCELLED. */\n  CANCELLED: 1;\n\n  /** UNKNOWN. */\n  UNKNOWN: 2;\n\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3;\n\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4;\n\n  /** NOT_FOUND. */\n  NOT_FOUND: 5;\n\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6;\n\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7;\n\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8;\n\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9;\n\n  /** ABORTED. */\n  ABORTED: 10;\n\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11;\n\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12;\n\n  /** INTERNAL. */\n  INTERNAL: 13;\n\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14;\n\n  /** DATA_LOSS. */\n  DATA_LOSS: 15;\n\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16;\n};\n\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport const RpcGrpcStatusCodeValues: RpcGrpcStatusCodeValues = {\n  OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n  CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n  UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n  INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n  DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n  NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n  ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n  PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n  RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n  FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n  ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n  OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n  UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n  INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n  UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n  DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n  UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n\n/**\n * Whether this is a received or sent message.\n */\nexport const MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n\n/**\n * Whether this is a received or sent message.\n */\nexport const MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n\n/**\n * Identifies the Values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport type MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT';\n\n  /** received. */\n  RECEIVED: 'RECEIVED';\n};\n\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport const MessageTypeValues: MessageTypeValues =\n  /*#__PURE__*/ createConstMap<MessageTypeValues>([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n  ]);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticAttributes';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createConstMap } from '../internal/utils';\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n\n/**\n * Name of the cloud provider.\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n\n/**\n * The cloud account ID the resource is assigned to.\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n\n/**\n * The task definition family this task definition is a member of.\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n\n/**\n * The revision for this task definition.\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n\n/**\n * The ARN of an EKS cluster.\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n\n/**\n * Container name.\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n\n/**\n * The container runtime managing this container.\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n\n/**\n * Name of the image the container was built on.\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n\n/**\n * Container image tag.\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n\n/**\n * Type of host. For Cloud, this must be the machine type.\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n\n/**\n * Name of the VM image or OS install the host was instantiated from.\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n\n/**\n * VM image ID. For Cloud, this value is from the provider.\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n\n/**\n * The name of the cluster.\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n\n/**\n * The name of the Node.\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n\n/**\n * The UID of the Node.\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n\n/**\n * The name of the namespace that the pod is running in.\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n\n/**\n * The UID of the Pod.\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n\n/**\n * The name of the Pod.\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n\n/**\n * The name of the Container in a Pod template.\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n\n/**\n * The UID of the ReplicaSet.\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n\n/**\n * The name of the ReplicaSet.\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n\n/**\n * The UID of the Deployment.\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n\n/**\n * The name of the Deployment.\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n\n/**\n * The UID of the StatefulSet.\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n\n/**\n * The name of the StatefulSet.\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n\n/**\n * The UID of the DaemonSet.\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n\n/**\n * The name of the DaemonSet.\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n\n/**\n * The UID of the Job.\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n\n/**\n * The name of the Job.\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n\n/**\n * The UID of the CronJob.\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n\n/**\n * The name of the CronJob.\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n\n/**\n * The operating system type.\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n\n/**\n * Human readable operating system name.\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n\n/**\n * Process identifier (PID).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n\n/**\n * The username of the user that owns the process.\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION =\n  TMP_PROCESS_RUNTIME_DESCRIPTION;\n\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n\n/**\n * The version string of the service API or implementation.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n\n/**\n * The name of the telemetry SDK as defined above.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n\n/**\n * The version string of the telemetry SDK.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n\n/**\n * The version string of the auto instrumentation agent, if used.\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n\n/**\n * The name of the web engine.\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n\n/**\n * The version of the web engine.\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n\n/**\n * Definition of available values for SemanticResourceAttributes\n * This type is used for backward compatibility, you should use the individual exported\n * constants SemanticResourceAttributes_XXXXX rather than the exported constant map. As any single reference\n * to a constant map value will result in all strings being included into your bundle.\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification.\n */\nexport type SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider';\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id';\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region';\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone';\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform';\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn';\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn';\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype';\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn';\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family';\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision';\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn';\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names';\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns';\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names';\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns';\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name';\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id';\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime';\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name';\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag';\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment';\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id';\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier';\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name';\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name';\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id';\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version';\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance';\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory';\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id';\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name';\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type';\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch';\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name';\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id';\n\n  /**\n   * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version';\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name';\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name';\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid';\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name';\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid';\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name';\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name';\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid';\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name';\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid';\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name';\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid';\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name';\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid';\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name';\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid';\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name';\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid';\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name';\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type';\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description';\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name';\n\n  /**\n   * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version';\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid';\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name';\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path';\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command';\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line';\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args';\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner';\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name';\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version';\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description';\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name';\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace';\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id';\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version';\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name';\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language';\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version';\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version';\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name';\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version';\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description';\n};\n\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes: SemanticResourceAttributes =\n  /*#__PURE__*/ createConstMap<SemanticResourceAttributes>([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD =\n  TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n\n/**\n * Identifies the Values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport type CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud';\n\n  /** Amazon Web Services. */\n  AWS: 'aws';\n\n  /** Microsoft Azure. */\n  AZURE: 'azure';\n\n  /** Google Cloud Platform. */\n  GCP: 'gcp';\n};\n\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues: CloudProviderValues =\n  /*#__PURE__*/ createConstMap<CloudProviderValues>([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES =\n  'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS =\n  TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC =\n  TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA =\n  TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK =\n  TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES =\n  TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS =\n  TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE =\n  TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN =\n  TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS =\n  TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n\n/**\n * Identifies the Values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport type CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs';\n\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc';\n\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2';\n\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs';\n\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks';\n\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda';\n\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk';\n\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm';\n\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances';\n\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks';\n\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions';\n\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service';\n\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine';\n\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run';\n\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine';\n\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions';\n\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine';\n};\n\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues: CloudPlatformValues =\n  /*#__PURE__*/ createConstMap<CloudPlatformValues>([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE =\n  TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n\n/**\n * Identifies the Values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport type AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2';\n\n  /** fargate. */\n  FARGATE: 'fargate';\n};\n\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues: AwsEcsLaunchtypeValues =\n  /*#__PURE__*/ createConstMap<AwsEcsLaunchtypeValues>([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n\n/**\n * Identifies the Values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport type HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64';\n\n  /** ARM32. */\n  ARM32: 'arm32';\n\n  /** ARM64. */\n  ARM64: 'arm64';\n\n  /** Itanium. */\n  IA64: 'ia64';\n\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32';\n\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64';\n\n  /** 32-bit x86. */\n  X86: 'x86';\n};\n\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues: HostArchValues =\n  /*#__PURE__*/ createConstMap<HostArchValues>([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n\n/**\n * Identifies the Values for OsTypeValues enum definition\n *\n * The operating system type.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport type OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows';\n\n  /** Linux. */\n  LINUX: 'linux';\n\n  /** Apple Darwin. */\n  DARWIN: 'darwin';\n\n  /** FreeBSD. */\n  FREEBSD: 'freebsd';\n\n  /** NetBSD. */\n  NETBSD: 'netbsd';\n\n  /** OpenBSD. */\n  OPENBSD: 'openbsd';\n\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd';\n\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux';\n\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix';\n\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris';\n\n  /** IBM z/OS. */\n  Z_OS: 'z_os';\n};\n\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues: OsTypeValues =\n  /*#__PURE__*/ createConstMap<OsTypeValues>([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n\n/**\n * Identifies the Values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport type TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp';\n\n  /** dotnet. */\n  DOTNET: 'dotnet';\n\n  /** erlang. */\n  ERLANG: 'erlang';\n\n  /** go. */\n  GO: 'go';\n\n  /** java. */\n  JAVA: 'java';\n\n  /** nodejs. */\n  NODEJS: 'nodejs';\n\n  /** php. */\n  PHP: 'php';\n\n  /** python. */\n  PYTHON: 'python';\n\n  /** ruby. */\n  RUBY: 'ruby';\n\n  /** webjs. */\n  WEBJS: 'webjs';\n};\n\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues: TelemetrySdkLanguageValues =\n  /*#__PURE__*/ createConstMap<TelemetrySdkLanguageValues>([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n  ]);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticResourceAttributes';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './trace';\nexport * from './resource';\n"],"mappings":"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kBAAAC,MCAA,IA4BMC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GACAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAOOC,GAKAC,GAKAC,GAKAC,GAKAC,GAOAC,GAOAC,GAOAC,GAOAC,GAKAC,GAKAC,GAKAC,GAQAC,GAKAC,GAKAC,GAMAC,GAMAC,GAMAC,GAKAC,GAKAC,GAOAC,GAKAC,GAKAC,GAKAC,GAsBAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAOAC,GAOAC,GAOAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAMAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAOAC,GAKAC,GAOAC,GAKAC,GAKAC,GAOAC,GAKAC,GAKAC,GAMA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","names":["_globalThis","init_globalThis","__esmMin","init_esm_shims","init_node","__esmMin","init_esm_shims","init_globalThis","init_platform","__esmMin","init_esm_shims","init_node","VERSION","init_version","__esmMin","init_esm_shims","_makeCompatibilityCheck","ownVersion","acceptedVersions","rejectedVersions","myVersionMatch","re","ownVersionParsed","globalVersion","_reject","v","_accept","globalVersionMatch","globalVersionParsed","isCompatible","init_semver","__esmMin","init_esm_shims","init_version","VERSION","registerGlobal","type","instance","diag","allowOverride","api","_global","GLOBAL_OPENTELEMETRY_API_KEY","_a","VERSION","err","getGlobal","globalVersion","isCompatible","_b","unregisterGlobal","major","init_global_utils","__esmMin","init_esm_shims","init_platform","init_version","init_semver","_globalThis","logProxy","funcName","namespace","args","logger","getGlobal","__spreadArray","__read","DiagComponentLogger","init_ComponentLogger","__esmMin","init_esm_shims","init_global_utils","props","_i","DiagLogLevel","init_types","__esmMin","init_esm_shims","createLogLevelDiagLogger","maxLevel","logger","DiagLogLevel","_filterFunc","funcName","theLevel","theFunc","init_logLevelLogger","__esmMin","init_esm_shims","init_types","API_NAME","DiagAPI","init_diag","__esmMin","init_esm_shims","init_ComponentLogger","init_logLevelLogger","init_types","init_global_utils","_logProxy","funcName","args","_i","logger","getGlobal","__spreadArray","__read","self","setLogger","optionsOrLogLevel","DiagLogLevel","err","_a","oldLogger","newLogger","createLogLevelDiagLogger","_b","stack","_c","registerGlobal","unregisterGlobal","options","DiagComponentLogger","BaggageImpl","init_baggage_impl","__esmMin","init_esm_shims","entries","key","entry","_a","_b","__read","k","v","newBaggage","keys","_i","keys_1","__values","keys_1_1","baggageEntryMetadataSymbol","init_symbol","__esmMin","init_esm_shims","createBaggage","entries","BaggageImpl","baggageEntryMetadataFromString","str","diag","baggageEntryMetadataSymbol","init_utils","__esmMin","init_esm_shims","init_diag","init_baggage_impl","init_symbol","DiagAPI","createContextKey","description","BaseContext","ROOT_CONTEXT","init_context","__esmMin","init_esm_shims","parentContext","self","key","value","context","consoleMap","DiagConsoleLogger","init_consoleLogger","__esmMin","init_esm_shims","_consoleFunc","funcName","args","_i","theFunc","i","createNoopMeter","NOOP_METER","NoopMeter","NoopMetric","NoopCounterMetric","NoopUpDownCounterMetric","NoopGaugeMetric","NoopHistogramMetric","NoopObservableMetric","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","NOOP_COUNTER_METRIC","NOOP_GAUGE_METRIC","NOOP_HISTOGRAM_METRIC","NOOP_UP_DOWN_COUNTER_METRIC","NOOP_OBSERVABLE_COUNTER_METRIC","NOOP_OBSERVABLE_GAUGE_METRIC","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","init_NoopMeter","__esmMin","init_esm_shims","_name","_options","_callback","_observables","_super","__extends","_value","_attributes","ValueType","init_Metric","__esmMin","init_esm_shims","defaultTextMapGetter","defaultTextMapSetter","init_TextMapPropagator","__esmMin","init_esm_shims","carrier","key","value","NoopContextManager","init_NoopContextManager","__esmMin","init_esm_shims","init_context","ROOT_CONTEXT","_context","fn","thisArg","args","_i","__spreadArray","__read","target","API_NAME","NOOP_CONTEXT_MANAGER","ContextAPI","init_context","__esmMin","init_esm_shims","init_NoopContextManager","init_global_utils","init_diag","NoopContextManager","contextManager","registerGlobal","DiagAPI","context","fn","thisArg","args","_i","_a","__spreadArray","__read","target","getGlobal","unregisterGlobal","TraceFlags","init_trace_flags","__esmMin","init_esm_shims","INVALID_SPANID","INVALID_TRACEID","INVALID_SPAN_CONTEXT","init_invalid_span_constants","__esmMin","init_esm_shims","init_trace_flags","TraceFlags","NonRecordingSpan","init_NonRecordingSpan","__esmMin","init_esm_shims","init_invalid_span_constants","_spanContext","INVALID_SPAN_CONTEXT","_key","_value","_attributes","_name","_link","_links","_status","_endTime","_exception","_time","getSpan","context","SPAN_KEY","getActiveSpan","ContextAPI","setSpan","span","deleteSpan","setSpanContext","spanContext","NonRecordingSpan","getSpanContext","_a","init_context_utils","__esmMin","init_esm_shims","init_context","init_NonRecordingSpan","createContextKey","isValidTraceId","traceId","VALID_TRACEID_REGEX","INVALID_TRACEID","isValidSpanId","spanId","VALID_SPANID_REGEX","INVALID_SPANID","isSpanContextValid","spanContext","wrapSpanContext","NonRecordingSpan","init_spancontext_utils","__esmMin","init_esm_shims","init_invalid_span_constants","init_NonRecordingSpan","isSpanContext","spanContext","contextApi","NoopTracer","init_NoopTracer","__esmMin","init_esm_shims","init_context","init_context_utils","init_NonRecordingSpan","init_spancontext_utils","ContextAPI","name","options","context","root","NonRecordingSpan","parentFromContext","getSpanContext","isSpanContextValid","arg2","arg3","arg4","opts","ctx","fn","parentContext","span","contextWithSpanSet","setSpan","NOOP_TRACER","ProxyTracer","init_ProxyTracer","__esmMin","init_esm_shims","init_NoopTracer","NoopTracer","_provider","name","version","options","context","_name","_options","_context","_fn","tracer","NoopTracerProvider","init_NoopTracerProvider","__esmMin","init_esm_shims","init_NoopTracer","_name","_version","_options","NoopTracer","NOOP_TRACER_PROVIDER","ProxyTracerProvider","init_ProxyTracerProvider","__esmMin","init_esm_shims","init_ProxyTracer","init_NoopTracerProvider","NoopTracerProvider","name","version","options","_a","ProxyTracer","delegate","SamplingDecision","init_SamplingResult","__esmMin","init_esm_shims","SpanKind","init_span_kind","__esmMin","init_esm_shims","SpanStatusCode","init_status","__esmMin","init_esm_shims","validateKey","key","VALID_KEY_REGEX","validateValue","value","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","VALID_KEY_CHAR_RANGE","VALID_KEY","VALID_VENDOR_KEY","init_tracestate_validators","__esmMin","init_esm_shims","MAX_TRACE_STATE_ITEMS","MAX_TRACE_STATE_LEN","LIST_MEMBERS_SEPARATOR","LIST_MEMBER_KEY_VALUE_SPLITTER","TraceStateImpl","init_tracestate_impl","__esmMin","init_esm_shims","init_tracestate_validators","rawTraceState","key","value","traceState","_this","agg","part","listMember","i","validateKey","validateValue","createTraceState","rawTraceState","TraceStateImpl","init_utils","__esmMin","init_esm_shims","init_tracestate_impl","context","init_context_api","__esmMin","init_esm_shims","init_context","ContextAPI","diag","init_diag_api","__esmMin","init_esm_shims","init_diag","DiagAPI","NoopMeterProvider","NOOP_METER_PROVIDER","init_NoopMeterProvider","__esmMin","init_esm_shims","init_NoopMeter","_name","_version","_options","NOOP_METER","API_NAME","MetricsAPI","init_metrics","__esmMin","init_esm_shims","init_NoopMeterProvider","init_global_utils","init_diag","provider","registerGlobal","DiagAPI","getGlobal","NOOP_METER_PROVIDER","name","version","options","unregisterGlobal","metrics","init_metrics_api","__esmMin","init_esm_shims","init_metrics","MetricsAPI","NoopTextMapPropagator","init_NoopTextMapPropagator","__esmMin","init_esm_shims","_context","_carrier","context","getBaggage","context","BAGGAGE_KEY","getActiveBaggage","ContextAPI","setBaggage","baggage","deleteBaggage","init_context_helpers","__esmMin","init_esm_shims","init_context","createContextKey","API_NAME","NOOP_TEXT_MAP_PROPAGATOR","PropagationAPI","init_propagation","__esmMin","init_esm_shims","init_global_utils","init_NoopTextMapPropagator","init_TextMapPropagator","init_context_helpers","init_utils","init_diag","NoopTextMapPropagator","createBaggage","getBaggage","getActiveBaggage","setBaggage","deleteBaggage","propagator","registerGlobal","DiagAPI","context","carrier","setter","defaultTextMapSetter","getter","defaultTextMapGetter","unregisterGlobal","getGlobal","propagation","init_propagation_api","__esmMin","init_esm_shims","init_propagation","PropagationAPI","API_NAME","TraceAPI","init_trace","__esmMin","init_esm_shims","init_global_utils","init_ProxyTracerProvider","init_spancontext_utils","init_context_utils","init_diag","ProxyTracerProvider","wrapSpanContext","isSpanContextValid","deleteSpan","getSpan","getActiveSpan","getSpanContext","setSpan","setSpanContext","provider","success","registerGlobal","DiagAPI","getGlobal","name","version","unregisterGlobal","trace","init_trace_api","__esmMin","init_esm_shims","init_trace","TraceAPI","esm_exports","__export","DiagConsoleLogger","DiagLogLevel","INVALID_SPANID","INVALID_SPAN_CONTEXT","INVALID_TRACEID","ProxyTracer","ProxyTracerProvider","ROOT_CONTEXT","SamplingDecision","SpanKind","SpanStatusCode","TraceFlags","ValueType","baggageEntryMetadataFromString","context","createContextKey","createNoopMeter","createTraceState","esm_default","defaultTextMapGetter","defaultTextMapSetter","diag","isSpanContextValid","isValidSpanId","isValidTraceId","metrics","propagation","trace","init_esm","__esmMin","init_esm_shims","init_utils","init_context","init_consoleLogger","init_types","init_NoopMeter","init_Metric","init_TextMapPropagator","init_ProxyTracer","init_ProxyTracerProvider","init_SamplingResult","init_span_kind","init_status","init_trace_flags","init_spancontext_utils","init_invalid_span_constants","init_context_api","init_diag_api","init_metrics_api","init_propagation_api","init_trace_api","createConstMap","values","res","len","lp","val","init_utils","__esmMin","init_esm_shims","TMP_AWS_LAMBDA_INVOKED_ARN","TMP_DB_SYSTEM","TMP_DB_CONNECTION_STRING","TMP_DB_USER","TMP_DB_JDBC_DRIVER_CLASSNAME","TMP_DB_NAME","TMP_DB_STATEMENT","TMP_DB_OPERATION","TMP_DB_MSSQL_INSTANCE_NAME","TMP_DB_CASSANDRA_KEYSPACE","TMP_DB_CASSANDRA_PAGE_SIZE","TMP_DB_CASSANDRA_CONSISTENCY_LEVEL","TMP_DB_CASSANDRA_TABLE","TMP_DB_CASSANDRA_IDEMPOTENCE","TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT","TMP_DB_CASSANDRA_COORDINATOR_ID","TMP_DB_CASSANDRA_COORDINATOR_DC","TMP_DB_HBASE_NAMESPACE","TMP_DB_REDIS_DATABASE_INDEX","TMP_DB_MONGODB_COLLECTION","TMP_DB_SQL_TABLE","TMP_EXCEPTION_TYPE","TMP_EXCEPTION_MESSAGE","TMP_EXCEPTION_STACKTRACE","TMP_EXCEPTION_ESCAPED","TMP_FAAS_TRIGGER","TMP_FAAS_EXECUTION","TMP_FAAS_DOCUMENT_COLLECTION","TMP_FAAS_DOCUMENT_OPERATION","TMP_FAAS_DOCUMENT_TIME","TMP_FAAS_DOCUMENT_NAME","TMP_FAAS_TIME","TMP_FAAS_CRON","TMP_FAAS_COLDSTART","TMP_FAAS_INVOKED_NAME","TMP_FAAS_INVOKED_PROVIDER","TMP_FAAS_INVOKED_REGION","TMP_NET_TRANSPORT","TMP_NET_PEER_IP","TMP_NET_PEER_PORT","TMP_NET_PEER_NAME","TMP_NET_HOST_IP","TMP_NET_HOST_PORT","TMP_NET_HOST_NAME","TMP_NET_HOST_CONNECTION_TYPE","TMP_NET_HOST_CONNECTION_SUBTYPE","TMP_NET_HOST_CARRIER_NAME","TMP_NET_HOST_CARRIER_MCC","TMP_NET_HOST_CARRIER_MNC","TMP_NET_HOST_CARRIER_ICC","TMP_PEER_SERVICE","TMP_ENDUSER_ID","TMP_ENDUSER_ROLE","TMP_ENDUSER_SCOPE","TMP_THREAD_ID","TMP_THREAD_NAME","TMP_CODE_FUNCTION","TMP_CODE_NAMESPACE","TMP_CODE_FILEPATH","TMP_CODE_LINENO","TMP_HTTP_METHOD","TMP_HTTP_URL","TMP_HTTP_TARGET","TMP_HTTP_HOST","TMP_HTTP_SCHEME","TMP_HTTP_STATUS_CODE","TMP_HTTP_FLAVOR","TMP_HTTP_USER_AGENT","TMP_HTTP_REQUEST_CONTENT_LENGTH","TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED","TMP_HTTP_RESPONSE_CONTENT_LENGTH","TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","TMP_HTTP_SERVER_NAME","TMP_HTTP_ROUTE","TMP_HTTP_CLIENT_IP","TMP_AWS_DYNAMODB_TABLE_NAMES","TMP_AWS_DYNAMODB_CONSUMED_CAPACITY","TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS","TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY","TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY","TMP_AWS_DYNAMODB_CONSISTENT_READ","TMP_AWS_DYNAMODB_PROJECTION","TMP_AWS_DYNAMODB_LIMIT","TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET","TMP_AWS_DYNAMODB_INDEX_NAME","TMP_AWS_DYNAMODB_SELECT","TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES","TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES","TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE","TMP_AWS_DYNAMODB_TABLE_COUNT","TMP_AWS_DYNAMODB_SCAN_FORWARD","TMP_AWS_DYNAMODB_SEGMENT","TMP_AWS_DYNAMODB_TOTAL_SEGMENTS","TMP_AWS_DYNAMODB_COUNT","TMP_AWS_DYNAMODB_SCANNED_COUNT","TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS","TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES","TMP_MESSAGING_SYSTEM","TMP_MESSAGING_DESTINATION","TMP_MESSAGING_DESTINATION_KIND","TMP_MESSAGING_TEMP_DESTINATION","TMP_MESSAGING_PROTOCOL","TMP_MESSAGING_PROTOCOL_VERSION","TMP_MESSAGING_URL","TMP_MESSAGING_MESSAGE_ID","TMP_MESSAGING_CONVERSATION_ID","TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES","TMP_MESSAGING_OPERATION","TMP_MESSAGING_CONSUMER_ID","TMP_MESSAGING_RABBITMQ_ROUTING_KEY","TMP_MESSAGING_KAFKA_MESSAGE_KEY","TMP_MESSAGING_KAFKA_CONSUMER_GROUP","TMP_MESSAGING_KAFKA_CLIENT_ID","TMP_MESSAGING_KAFKA_PARTITION","TMP_MESSAGING_KAFKA_TOMBSTONE","TMP_RPC_SYSTEM","TMP_RPC_SERVICE","TMP_RPC_METHOD","TMP_RPC_GRPC_STATUS_CODE","TMP_RPC_JSONRPC_VERSION","TMP_RPC_JSONRPC_REQUEST_ID","TMP_RPC_JSONRPC_ERROR_CODE","TMP_RPC_JSONRPC_ERROR_MESSAGE","TMP_MESSAGE_TYPE","TMP_MESSAGE_ID","TMP_MESSAGE_COMPRESSED_SIZE","TMP_MESSAGE_UNCOMPRESSED_SIZE","SEMATTRS_AWS_LAMBDA_INVOKED_ARN","SEMATTRS_DB_SYSTEM","SEMATTRS_DB_CONNECTION_STRING","SEMATTRS_DB_USER","SEMATTRS_DB_JDBC_DRIVER_CLASSNAME","SEMATTRS_DB_NAME","SEMATTRS_DB_STATEMENT","SEMATTRS_DB_OPERATION","SEMATTRS_DB_MSSQL_INSTANCE_NAME","SEMATTRS_DB_CASSANDRA_KEYSPACE","SEMATTRS_DB_CASSANDRA_PAGE_SIZE","SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL","SEMATTRS_DB_CASSANDRA_TABLE","SEMATTRS_DB_CASSANDRA_IDEMPOTENCE","SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT","SEMATTRS_DB_CASSANDRA_COORDINATOR_ID","SEMATTRS_DB_CASSANDRA_COORDINATOR_DC","SEMATTRS_DB_HBASE_NAMESPACE","SEMATTRS_DB_REDIS_DATABASE_INDEX","SEMATTRS_DB_MONGODB_COLLECTION","SEMATTRS_DB_SQL_TABLE","SEMATTRS_EXCEPTION_TYPE","SEMATTRS_EXCEPTION_MESSAGE","SEMATTRS_EXCEPTION_STACKTRACE","SEMATTRS_EXCEPTION_ESCAPED","SEMATTRS_FAAS_TRIGGER","SEMATTRS_FAAS_EXECUTION","SEMATTRS_FAAS_DOCUMENT_COLLECTION","SEMATTRS_FAAS_DOCUMENT_OPERATION","SEMATTRS_FAAS_DOCUMENT_TIME","SEMATTRS_FAAS_DOCUMENT_NAME","SEMATTRS_FAAS_TIME","SEMATTRS_FAAS_CRON","SEMATTRS_FAAS_COLDSTART","SEMATTRS_FAAS_INVOKED_NAME","SEMATTRS_FAAS_INVOKED_PROVIDER","SEMATTRS_FAAS_INVOKED_REGION","SEMATTRS_NET_TRANSPORT","SEMATTRS_NET_PEER_IP","SEMATTRS_NET_PEER_PORT","SEMATTRS_NET_PEER_NAME","SEMATTRS_NET_HOST_IP","SEMATTRS_NET_HOST_PORT","SEMATTRS_NET_HOST_NAME","SEMATTRS_NET_HOST_CONNECTION_TYPE","SEMATTRS_NET_HOST_CONNECTION_SUBTYPE","SEMATTRS_NET_HOST_CARRIER_NAME","SEMATTRS_NET_HOST_CARRIER_MCC","SEMATTRS_NET_HOST_CARRIER_MNC","SEMATTRS_NET_HOST_CARRIER_ICC","SEMATTRS_PEER_SERVICE","SEMATTRS_ENDUSER_ID","SEMATTRS_ENDUSER_ROLE","SEMATTRS_ENDUSER_SCOPE","SEMATTRS_THREAD_ID","SEMATTRS_THREAD_NAME","SEMATTRS_CODE_FUNCTION","SEMATTRS_CODE_NAMESPACE","SEMATTRS_CODE_FILEPATH","SEMATTRS_CODE_LINENO","SEMATTRS_HTTP_METHOD","SEMATTRS_HTTP_URL","SEMATTRS_HTTP_TARGET","SEMATTRS_HTTP_HOST","SEMATTRS_HTTP_SCHEME","SEMATTRS_HTTP_STATUS_CODE","SEMATTRS_HTTP_FLAVOR","SEMATTRS_HTTP_USER_AGENT","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_SERVER_NAME","SEMATTRS_HTTP_ROUTE","SEMATTRS_HTTP_CLIENT_IP","SEMATTRS_AWS_DYNAMODB_TABLE_NAMES","SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY","SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS","SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY","SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY","SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ","SEMATTRS_AWS_DYNAMODB_PROJECTION","SEMATTRS_AWS_DYNAMODB_LIMIT","SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET","SEMATTRS_AWS_DYNAMODB_INDEX_NAME","SEMATTRS_AWS_DYNAMODB_SELECT","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE","SEMATTRS_AWS_DYNAMODB_TABLE_COUNT","SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD","SEMATTRS_AWS_DYNAMODB_SEGMENT","SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS","SEMATTRS_AWS_DYNAMODB_COUNT","SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT","SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES","SEMATTRS_MESSAGING_SYSTEM","SEMATTRS_MESSAGING_DESTINATION","SEMATTRS_MESSAGING_DESTINATION_KIND","SEMATTRS_MESSAGING_TEMP_DESTINATION","SEMATTRS_MESSAGING_PROTOCOL","SEMATTRS_MESSAGING_PROTOCOL_VERSION","SEMATTRS_MESSAGING_URL","SEMATTRS_MESSAGING_MESSAGE_ID","SEMATTRS_MESSAGING_CONVERSATION_ID","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES","SEMATTRS_MESSAGING_OPERATION","SEMATTRS_MESSAGING_CONSUMER_ID","SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY","SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY","SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP","SEMATTRS_MESSAGING_KAFKA_CLIENT_ID","SEMATTRS_MESSAGING_KAFKA_PARTITION","SEMATTRS_MESSAGING_KAFKA_TOMBSTONE","SEMATTRS_RPC_SYSTEM","SEMATTRS_RPC_SERVICE","SEMATTRS_RPC_METHOD","SEMATTRS_RPC_GRPC_STATUS_CODE","SEMATTRS_RPC_JSONRPC_VERSION","SEMATTRS_RPC_JSONRPC_REQUEST_ID","SEMATTRS_RPC_JSONRPC_ERROR_CODE","SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE","SEMATTRS_MESSAGE_TYPE","SEMATTRS_MESSAGE_ID","SEMATTRS_MESSAGE_COMPRESSED_SIZE","SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE","SemanticAttributes","TMP_DBSYSTEMVALUES_OTHER_SQL","TMP_DBSYSTEMVALUES_MSSQL","TMP_DBSYSTEMVALUES_MYSQL","TMP_DBSYSTEMVALUES_ORACLE","TMP_DBSYSTEMVALUES_DB2","TMP_DBSYSTEMVALUES_POSTGRESQL","TMP_DBSYSTEMVALUES_REDSHIFT","TMP_DBSYSTEMVALUES_HIVE","TMP_DBSYSTEMVALUES_CLOUDSCAPE","TMP_DBSYSTEMVALUES_HSQLDB","TMP_DBSYSTEMVALUES_PROGRESS","TMP_DBSYSTEMVALUES_MAXDB","TMP_DBSYSTEMVALUES_HANADB","TMP_DBSYSTEMVALUES_INGRES","TMP_DBSYSTEMVALUES_FIRSTSQL","TMP_DBSYSTEMVALUES_EDB","TMP_DBSYSTEMVALUES_CACHE","TMP_DBSYSTEMVALUES_ADABAS","TMP_DBSYSTEMVALUES_FIREBIRD","TMP_DBSYSTEMVALUES_DERBY","TMP_DBSYSTEMVALUES_FILEMAKER","TMP_DBSYSTEMVALUES_INFORMIX","TMP_DBSYSTEMVALUES_INSTANTDB","TMP_DBSYSTEMVALUES_INTERBASE","TMP_DBSYSTEMVALUES_MARIADB","TMP_DBSYSTEMVALUES_NETEZZA","TMP_DBSYSTEMVALUES_PERVASIVE","TMP_DBSYSTEMVALUES_POINTBASE","TMP_DBSYSTEMVALUES_SQLITE","TMP_DBSYSTEMVALUES_SYBASE","TMP_DBSYSTEMVALUES_TERADATA","TMP_DBSYSTEMVALUES_VERTICA","TMP_DBSYSTEMVALUES_H2","TMP_DBSYSTEMVALUES_COLDFUSION","TMP_DBSYSTEMVALUES_CASSANDRA","TMP_DBSYSTEMVALUES_HBASE","TMP_DBSYSTEMVALUES_MONGODB","TMP_DBSYSTEMVALUES_REDIS","TMP_DBSYSTEMVALUES_COUCHBASE","TMP_DBSYSTEMVALUES_COUCHDB","TMP_DBSYSTEMVALUES_COSMOSDB","TMP_DBSYSTEMVALUES_DYNAMODB","TMP_DBSYSTEMVALUES_NEO4J","TMP_DBSYSTEMVALUES_GEODE","TMP_DBSYSTEMVALUES_ELASTICSEARCH","TMP_DBSYSTEMVALUES_MEMCACHED","TMP_DBSYSTEMVALUES_COCKROACHDB","DBSYSTEMVALUES_OTHER_SQL","DBSYSTEMVALUES_MSSQL","DBSYSTEMVALUES_MYSQL","DBSYSTEMVALUES_ORACLE","DBSYSTEMVALUES_DB2","DBSYSTEMVALUES_POSTGRESQL","DBSYSTEMVALUES_REDSHIFT","DBSYSTEMVALUES_HIVE","DBSYSTEMVALUES_CLOUDSCAPE","DBSYSTEMVALUES_HSQLDB","DBSYSTEMVALUES_PROGRESS","DBSYSTEMVALUES_MAXDB","DBSYSTEMVALUES_HANADB","DBSYSTEMVALUES_INGRES","DBSYSTEMVALUES_FIRSTSQL","DBSYSTEMVALUES_EDB","DBSYSTEMVALUES_CACHE","DBSYSTEMVALUES_ADABAS","DBSYSTEMVALUES_FIREBIRD","DBSYSTEMVALUES_DERBY","DBSYSTEMVALUES_FILEMAKER","DBSYSTEMVALUES_INFORMIX","DBSYSTEMVALUES_INSTANTDB","DBSYSTEMVALUES_INTERBASE","DBSYSTEMVALUES_MARIADB","DBSYSTEMVALUES_NETEZZA","DBSYSTEMVALUES_PERVASIVE","DBSYSTEMVALUES_POINTBASE","DBSYSTEMVALUES_SQLITE","DBSYSTEMVALUES_SYBASE","DBSYSTEMVALUES_TERADATA","DBSYSTEMVALUES_VERTICA","DBSYSTEMVALUES_H2","DBSYSTEMVALUES_COLDFUSION","DBSYSTEMVALUES_CASSANDRA","DBSYSTEMVALUES_HBASE","DBSYSTEMVALUES_MONGODB","DBSYSTEMVALUES_REDIS","DBSYSTEMVALUES_COUCHBASE","DBSYSTEMVALUES_COUCHDB","DBSYSTEMVALUES_COSMOSDB","DBSYSTEMVALUES_DYNAMODB","DBSYSTEMVALUES_NEO4J","DBSYSTEMVALUES_GEODE","DBSYSTEMVALUES_ELASTICSEARCH","DBSYSTEMVALUES_MEMCACHED","DBSYSTEMVALUES_COCKROACHDB","DbSystemValues","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_ALL","DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_TWO","DBCASSANDRACONSISTENCYLEVELVALUES_THREE","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_ANY","DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL","DbCassandraConsistencyLevelValues","TMP_FAASTRIGGERVALUES_DATASOURCE","TMP_FAASTRIGGERVALUES_HTTP","TMP_FAASTRIGGERVALUES_PUBSUB","TMP_FAASTRIGGERVALUES_TIMER","TMP_FAASTRIGGERVALUES_OTHER","FAASTRIGGERVALUES_DATASOURCE","FAASTRIGGERVALUES_HTTP","FAASTRIGGERVALUES_PUBSUB","FAASTRIGGERVALUES_TIMER","FAASTRIGGERVALUES_OTHER","FaasTriggerValues","TMP_FAASDOCUMENTOPERATIONVALUES_INSERT","TMP_FAASDOCUMENTOPERATIONVALUES_EDIT","TMP_FAASDOCUMENTOPERATIONVALUES_DELETE","FAASDOCUMENTOPERATIONVALUES_INSERT","FAASDOCUMENTOPERATIONVALUES_EDIT","FAASDOCUMENTOPERATIONVALUES_DELETE","FaasDocumentOperationValues","TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD","TMP_FAASINVOKEDPROVIDERVALUES_AWS","TMP_FAASINVOKEDPROVIDERVALUES_AZURE","TMP_FAASINVOKEDPROVIDERVALUES_GCP","FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD","FAASINVOKEDPROVIDERVALUES_AWS","FAASINVOKEDPROVIDERVALUES_AZURE","FAASINVOKEDPROVIDERVALUES_GCP","FaasInvokedProviderValues","TMP_NETTRANSPORTVALUES_IP_TCP","TMP_NETTRANSPORTVALUES_IP_UDP","TMP_NETTRANSPORTVALUES_IP","TMP_NETTRANSPORTVALUES_UNIX","TMP_NETTRANSPORTVALUES_PIPE","TMP_NETTRANSPORTVALUES_INPROC","TMP_NETTRANSPORTVALUES_OTHER","NETTRANSPORTVALUES_IP_TCP","NETTRANSPORTVALUES_IP_UDP","NETTRANSPORTVALUES_IP","NETTRANSPORTVALUES_UNIX","NETTRANSPORTVALUES_PIPE","NETTRANSPORTVALUES_INPROC","NETTRANSPORTVALUES_OTHER","NetTransportValues","TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI","TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED","TMP_NETHOSTCONNECTIONTYPEVALUES_CELL","TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE","TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN","NETHOSTCONNECTIONTYPEVALUES_WIFI","NETHOSTCONNECTIONTYPEVALUES_WIRED","NETHOSTCONNECTIONTYPEVALUES_CELL","NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE","NETHOSTCONNECTIONTYPEVALUES_UNKNOWN","NetHostConnectionTypeValues","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA","NETHOSTCONNECTIONSUBTYPEVALUES_GPRS","NETHOSTCONNECTIONSUBTYPEVALUES_EDGE","NETHOSTCONNECTIONSUBTYPEVALUES_UMTS","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT","NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSPA","NETHOSTCONNECTIONSUBTYPEVALUES_IDEN","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B","NETHOSTCONNECTIONSUBTYPEVALUES_LTE","NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD","NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP","NETHOSTCONNECTIONSUBTYPEVALUES_GSM","NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA","NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN","NETHOSTCONNECTIONSUBTYPEVALUES_NR","NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA","NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA","NetHostConnectionSubtypeValues","TMP_HTTPFLAVORVALUES_HTTP_1_0","TMP_HTTPFLAVORVALUES_HTTP_1_1","TMP_HTTPFLAVORVALUES_HTTP_2_0","TMP_HTTPFLAVORVALUES_SPDY","TMP_HTTPFLAVORVALUES_QUIC","HTTPFLAVORVALUES_HTTP_1_0","HTTPFLAVORVALUES_HTTP_1_1","HTTPFLAVORVALUES_HTTP_2_0","HTTPFLAVORVALUES_SPDY","HTTPFLAVORVALUES_QUIC","HttpFlavorValues","TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE","TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC","MESSAGINGDESTINATIONKINDVALUES_QUEUE","MESSAGINGDESTINATIONKINDVALUES_TOPIC","MessagingDestinationKindValues","TMP_MESSAGINGOPERATIONVALUES_RECEIVE","TMP_MESSAGINGOPERATIONVALUES_PROCESS","MESSAGINGOPERATIONVALUES_RECEIVE","MESSAGINGOPERATIONVALUES_PROCESS","MessagingOperationValues","TMP_RPCGRPCSTATUSCODEVALUES_OK","TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED","TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN","TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT","TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED","TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND","TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS","TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED","TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED","TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION","TMP_RPCGRPCSTATUSCODEVALUES_ABORTED","TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE","TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED","TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL","TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE","TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS","TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED","RPCGRPCSTATUSCODEVALUES_OK","RPCGRPCSTATUSCODEVALUES_CANCELLED","RPCGRPCSTATUSCODEVALUES_UNKNOWN","RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT","RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED","RPCGRPCSTATUSCODEVALUES_NOT_FOUND","RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS","RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED","RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED","RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION","RPCGRPCSTATUSCODEVALUES_ABORTED","RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE","RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED","RPCGRPCSTATUSCODEVALUES_INTERNAL","RPCGRPCSTATUSCODEVALUES_UNAVAILABLE","RPCGRPCSTATUSCODEVALUES_DATA_LOSS","RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED","RpcGrpcStatusCodeValues","TMP_MESSAGETYPEVALUES_SENT","TMP_MESSAGETYPEVALUES_RECEIVED","MESSAGETYPEVALUES_SENT","MESSAGETYPEVALUES_RECEIVED","MessageTypeValues","init_SemanticAttributes","__esmMin","init_esm_shims","init_utils","createConstMap","init_trace","__esmMin","init_esm_shims","init_SemanticAttributes","TMP_CLOUD_PROVIDER","TMP_CLOUD_ACCOUNT_ID","TMP_CLOUD_REGION","TMP_CLOUD_AVAILABILITY_ZONE","TMP_CLOUD_PLATFORM","TMP_AWS_ECS_CONTAINER_ARN","TMP_AWS_ECS_CLUSTER_ARN","TMP_AWS_ECS_LAUNCHTYPE","TMP_AWS_ECS_TASK_ARN","TMP_AWS_ECS_TASK_FAMILY","TMP_AWS_ECS_TASK_REVISION","TMP_AWS_EKS_CLUSTER_ARN","TMP_AWS_LOG_GROUP_NAMES","TMP_AWS_LOG_GROUP_ARNS","TMP_AWS_LOG_STREAM_NAMES","TMP_AWS_LOG_STREAM_ARNS","TMP_CONTAINER_NAME","TMP_CONTAINER_ID","TMP_CONTAINER_RUNTIME","TMP_CONTAINER_IMAGE_NAME","TMP_CONTAINER_IMAGE_TAG","TMP_DEPLOYMENT_ENVIRONMENT","TMP_DEVICE_ID","TMP_DEVICE_MODEL_IDENTIFIER","TMP_DEVICE_MODEL_NAME","TMP_FAAS_NAME","TMP_FAAS_ID","TMP_FAAS_VERSION","TMP_FAAS_INSTANCE","TMP_FAAS_MAX_MEMORY","TMP_HOST_ID","TMP_HOST_NAME","TMP_HOST_TYPE","TMP_HOST_ARCH","TMP_HOST_IMAGE_NAME","TMP_HOST_IMAGE_ID","TMP_HOST_IMAGE_VERSION","TMP_K8S_CLUSTER_NAME","TMP_K8S_NODE_NAME","TMP_K8S_NODE_UID","TMP_K8S_NAMESPACE_NAME","TMP_K8S_POD_UID","TMP_K8S_POD_NAME","TMP_K8S_CONTAINER_NAME","TMP_K8S_REPLICASET_UID","TMP_K8S_REPLICASET_NAME","TMP_K8S_DEPLOYMENT_UID","TMP_K8S_DEPLOYMENT_NAME","TMP_K8S_STATEFULSET_UID","TMP_K8S_STATEFULSET_NAME","TMP_K8S_DAEMONSET_UID","TMP_K8S_DAEMONSET_NAME","TMP_K8S_JOB_UID","TMP_K8S_JOB_NAME","TMP_K8S_CRONJOB_UID","TMP_K8S_CRONJOB_NAME","TMP_OS_TYPE","TMP_OS_DESCRIPTION","TMP_OS_NAME","TMP_OS_VERSION","TMP_PROCESS_PID","TMP_PROCESS_EXECUTABLE_NAME","TMP_PROCESS_EXECUTABLE_PATH","TMP_PROCESS_COMMAND","TMP_PROCESS_COMMAND_LINE","TMP_PROCESS_COMMAND_ARGS","TMP_PROCESS_OWNER","TMP_PROCESS_RUNTIME_NAME","TMP_PROCESS_RUNTIME_VERSION","TMP_PROCESS_RUNTIME_DESCRIPTION","TMP_SERVICE_NAME","TMP_SERVICE_NAMESPACE","TMP_SERVICE_INSTANCE_ID","TMP_SERVICE_VERSION","TMP_TELEMETRY_SDK_NAME","TMP_TELEMETRY_SDK_LANGUAGE","TMP_TELEMETRY_SDK_VERSION","TMP_TELEMETRY_AUTO_VERSION","TMP_WEBENGINE_NAME","TMP_WEBENGINE_VERSION","TMP_WEBENGINE_DESCRIPTION","SEMRESATTRS_CLOUD_PROVIDER","SEMRESATTRS_CLOUD_ACCOUNT_ID","SEMRESATTRS_CLOUD_REGION","SEMRESATTRS_CLOUD_AVAILABILITY_ZONE","SEMRESATTRS_CLOUD_PLATFORM","SEMRESATTRS_AWS_ECS_CONTAINER_ARN","SEMRESATTRS_AWS_ECS_CLUSTER_ARN","SEMRESATTRS_AWS_ECS_LAUNCHTYPE","SEMRESATTRS_AWS_ECS_TASK_ARN","SEMRESATTRS_AWS_ECS_TASK_FAMILY","SEMRESATTRS_AWS_ECS_TASK_REVISION","SEMRESATTRS_AWS_EKS_CLUSTER_ARN","SEMRESATTRS_AWS_LOG_GROUP_NAMES","SEMRESATTRS_AWS_LOG_GROUP_ARNS","SEMRESATTRS_AWS_LOG_STREAM_NAMES","SEMRESATTRS_AWS_LOG_STREAM_ARNS","SEMRESATTRS_CONTAINER_NAME","SEMRESATTRS_CONTAINER_ID","SEMRESATTRS_CONTAINER_RUNTIME","SEMRESATTRS_CONTAINER_IMAGE_NAME","SEMRESATTRS_CONTAINER_IMAGE_TAG","SEMRESATTRS_DEPLOYMENT_ENVIRONMENT","SEMRESATTRS_DEVICE_ID","SEMRESATTRS_DEVICE_MODEL_IDENTIFIER","SEMRESATTRS_DEVICE_MODEL_NAME","SEMRESATTRS_FAAS_NAME","SEMRESATTRS_FAAS_ID","SEMRESATTRS_FAAS_VERSION","SEMRESATTRS_FAAS_INSTANCE","SEMRESATTRS_FAAS_MAX_MEMORY","SEMRESATTRS_HOST_ID","SEMRESATTRS_HOST_NAME","SEMRESATTRS_HOST_TYPE","SEMRESATTRS_HOST_ARCH","SEMRESATTRS_HOST_IMAGE_NAME","SEMRESATTRS_HOST_IMAGE_ID","SEMRESATTRS_HOST_IMAGE_VERSION","SEMRESATTRS_K8S_CLUSTER_NAME","SEMRESATTRS_K8S_NODE_NAME","SEMRESATTRS_K8S_NODE_UID","SEMRESATTRS_K8S_NAMESPACE_NAME","SEMRESATTRS_K8S_POD_UID","SEMRESATTRS_K8S_POD_NAME","SEMRESATTRS_K8S_CONTAINER_NAME","SEMRESATTRS_K8S_REPLICASET_UID","SEMRESATTRS_K8S_REPLICASET_NAME","SEMRESATTRS_K8S_DEPLOYMENT_UID","SEMRESATTRS_K8S_DEPLOYMENT_NAME","SEMRESATTRS_K8S_STATEFULSET_UID","SEMRESATTRS_K8S_STATEFULSET_NAME","SEMRESATTRS_K8S_DAEMONSET_UID","SEMRESATTRS_K8S_DAEMONSET_NAME","SEMRESATTRS_K8S_JOB_UID","SEMRESATTRS_K8S_JOB_NAME","SEMRESATTRS_K8S_CRONJOB_UID","SEMRESATTRS_K8S_CRONJOB_NAME","SEMRESATTRS_OS_TYPE","SEMRESATTRS_OS_DESCRIPTION","SEMRESATTRS_OS_NAME","SEMRESATTRS_OS_VERSION","SEMRESATTRS_PROCESS_PID","SEMRESATTRS_PROCESS_EXECUTABLE_NAME","SEMRESATTRS_PROCESS_EXECUTABLE_PATH","SEMRESATTRS_PROCESS_COMMAND","SEMRESATTRS_PROCESS_COMMAND_LINE","SEMRESATTRS_PROCESS_COMMAND_ARGS","SEMRESATTRS_PROCESS_OWNER","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_PROCESS_RUNTIME_VERSION","SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION","SEMRESATTRS_SERVICE_NAME","SEMRESATTRS_SERVICE_NAMESPACE","SEMRESATTRS_SERVICE_INSTANCE_ID","SEMRESATTRS_SERVICE_VERSION","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_VERSION","SEMRESATTRS_TELEMETRY_AUTO_VERSION","SEMRESATTRS_WEBENGINE_NAME","SEMRESATTRS_WEBENGINE_VERSION","SEMRESATTRS_WEBENGINE_DESCRIPTION","SemanticResourceAttributes","TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD","TMP_CLOUDPROVIDERVALUES_AWS","TMP_CLOUDPROVIDERVALUES_AZURE","TMP_CLOUDPROVIDERVALUES_GCP","CLOUDPROVIDERVALUES_ALIBABA_CLOUD","CLOUDPROVIDERVALUES_AWS","CLOUDPROVIDERVALUES_AZURE","CLOUDPROVIDERVALUES_GCP","CloudProviderValues","TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS","TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC","TMP_CLOUDPLATFORMVALUES_AWS_EC2","TMP_CLOUDPLATFORMVALUES_AWS_ECS","TMP_CLOUDPLATFORMVALUES_AWS_EKS","TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA","TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK","TMP_CLOUDPLATFORMVALUES_AZURE_VM","TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES","TMP_CLOUDPLATFORMVALUES_AZURE_AKS","TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS","TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE","TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE","TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN","TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE","TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS","TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC","CLOUDPLATFORMVALUES_AWS_EC2","CLOUDPLATFORMVALUES_AWS_ECS","CLOUDPLATFORMVALUES_AWS_EKS","CLOUDPLATFORMVALUES_AWS_LAMBDA","CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK","CLOUDPLATFORMVALUES_AZURE_VM","CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES","CLOUDPLATFORMVALUES_AZURE_AKS","CLOUDPLATFORMVALUES_AZURE_FUNCTIONS","CLOUDPLATFORMVALUES_AZURE_APP_SERVICE","CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE","CLOUDPLATFORMVALUES_GCP_CLOUD_RUN","CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE","CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS","CLOUDPLATFORMVALUES_GCP_APP_ENGINE","CloudPlatformValues","TMP_AWSECSLAUNCHTYPEVALUES_EC2","TMP_AWSECSLAUNCHTYPEVALUES_FARGATE","AWSECSLAUNCHTYPEVALUES_EC2","AWSECSLAUNCHTYPEVALUES_FARGATE","AwsEcsLaunchtypeValues","TMP_HOSTARCHVALUES_AMD64","TMP_HOSTARCHVALUES_ARM32","TMP_HOSTARCHVALUES_ARM64","TMP_HOSTARCHVALUES_IA64","TMP_HOSTARCHVALUES_PPC32","TMP_HOSTARCHVALUES_PPC64","TMP_HOSTARCHVALUES_X86","HOSTARCHVALUES_AMD64","HOSTARCHVALUES_ARM32","HOSTARCHVALUES_ARM64","HOSTARCHVALUES_IA64","HOSTARCHVALUES_PPC32","HOSTARCHVALUES_PPC64","HOSTARCHVALUES_X86","HostArchValues","TMP_OSTYPEVALUES_WINDOWS","TMP_OSTYPEVALUES_LINUX","TMP_OSTYPEVALUES_DARWIN","TMP_OSTYPEVALUES_FREEBSD","TMP_OSTYPEVALUES_NETBSD","TMP_OSTYPEVALUES_OPENBSD","TMP_OSTYPEVALUES_DRAGONFLYBSD","TMP_OSTYPEVALUES_HPUX","TMP_OSTYPEVALUES_AIX","TMP_OSTYPEVALUES_SOLARIS","TMP_OSTYPEVALUES_Z_OS","OSTYPEVALUES_WINDOWS","OSTYPEVALUES_LINUX","OSTYPEVALUES_DARWIN","OSTYPEVALUES_FREEBSD","OSTYPEVALUES_NETBSD","OSTYPEVALUES_OPENBSD","OSTYPEVALUES_DRAGONFLYBSD","OSTYPEVALUES_HPUX","OSTYPEVALUES_AIX","OSTYPEVALUES_SOLARIS","OSTYPEVALUES_Z_OS","OsTypeValues","TMP_TELEMETRYSDKLANGUAGEVALUES_CPP","TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET","TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG","TMP_TELEMETRYSDKLANGUAGEVALUES_GO","TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA","TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS","TMP_TELEMETRYSDKLANGUAGEVALUES_PHP","TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON","TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY","TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS","TELEMETRYSDKLANGUAGEVALUES_CPP","TELEMETRYSDKLANGUAGEVALUES_DOTNET","TELEMETRYSDKLANGUAGEVALUES_ERLANG","TELEMETRYSDKLANGUAGEVALUES_GO","TELEMETRYSDKLANGUAGEVALUES_JAVA","TELEMETRYSDKLANGUAGEVALUES_NODEJS","TELEMETRYSDKLANGUAGEVALUES_PHP","TELEMETRYSDKLANGUAGEVALUES_PYTHON","TELEMETRYSDKLANGUAGEVALUES_RUBY","TELEMETRYSDKLANGUAGEVALUES_WEBJS","TelemetrySdkLanguageValues","init_SemanticResourceAttributes","__esmMin","init_esm_shims","init_utils","createConstMap","init_resource","__esmMin","init_esm_shims","init_SemanticResourceAttributes","esm_exports","__export","AWSECSLAUNCHTYPEVALUES_EC2","AWSECSLAUNCHTYPEVALUES_FARGATE","AwsEcsLaunchtypeValues","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC","CLOUDPLATFORMVALUES_AWS_EC2","CLOUDPLATFORMVALUES_AWS_ECS","CLOUDPLATFORMVALUES_AWS_EKS","CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK","CLOUDPLATFORMVALUES_AWS_LAMBDA","CLOUDPLATFORMVALUES_AZURE_AKS","CLOUDPLATFORMVALUES_AZURE_APP_SERVICE","CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES","CLOUDPLATFORMVALUES_AZURE_FUNCTIONS","CLOUDPLATFORMVALUES_AZURE_VM","CLOUDPLATFORMVALUES_GCP_APP_ENGINE","CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS","CLOUDPLATFORMVALUES_GCP_CLOUD_RUN","CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE","CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE","CLOUDPROVIDERVALUES_ALIBABA_CLOUD","CLOUDPROVIDERVALUES_AWS","CLOUDPROVIDERVALUES_AZURE","CLOUDPROVIDERVALUES_GCP","CloudPlatformValues","CloudProviderValues","DBCASSANDRACONSISTENCYLEVELVALUES_ALL","DBCASSANDRACONSISTENCYLEVELVALUES_ANY","DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_THREE","DBCASSANDRACONSISTENCYLEVELVALUES_TWO","DBSYSTEMVALUES_ADABAS","DBSYSTEMVALUES_CACHE","DBSYSTEMVALUES_CASSANDRA","DBSYSTEMVALUES_CLOUDSCAPE","DBSYSTEMVALUES_COCKROACHDB","DBSYSTEMVALUES_COLDFUSION","DBSYSTEMVALUES_COSMOSDB","DBSYSTEMVALUES_COUCHBASE","DBSYSTEMVALUES_COUCHDB","DBSYSTEMVALUES_DB2","DBSYSTEMVALUES_DERBY","DBSYSTEMVALUES_DYNAMODB","DBSYSTEMVALUES_EDB","DBSYSTEMVALUES_ELASTICSEARCH","DBSYSTEMVALUES_FILEMAKER","DBSYSTEMVALUES_FIREBIRD","DBSYSTEMVALUES_FIRSTSQL","DBSYSTEMVALUES_GEODE","DBSYSTEMVALUES_H2","DBSYSTEMVALUES_HANADB","DBSYSTEMVALUES_HBASE","DBSYSTEMVALUES_HIVE","DBSYSTEMVALUES_HSQLDB","DBSYSTEMVALUES_INFORMIX","DBSYSTEMVALUES_INGRES","DBSYSTEMVALUES_INSTANTDB","DBSYSTEMVALUES_INTERBASE","DBSYSTEMVALUES_MARIADB","DBSYSTEMVALUES_MAXDB","DBSYSTEMVALUES_MEMCACHED","DBSYSTEMVALUES_MONGODB","DBSYSTEMVALUES_MSSQL","DBSYSTEMVALUES_MYSQL","DBSYSTEMVALUES_NEO4J","DBSYSTEMVALUES_NETEZZA","DBSYSTEMVALUES_ORACLE","DBSYSTEMVALUES_OTHER_SQL","DBSYSTEMVALUES_PERVASIVE","DBSYSTEMVALUES_POINTBASE","DBSYSTEMVALUES_POSTGRESQL","DBSYSTEMVALUES_PROGRESS","DBSYSTEMVALUES_REDIS","DBSYSTEMVALUES_REDSHIFT","DBSYSTEMVALUES_SQLITE","DBSYSTEMVALUES_SYBASE","DBSYSTEMVALUES_TERADATA","DBSYSTEMVALUES_VERTICA","DbCassandraConsistencyLevelValues","DbSystemValues","FAASDOCUMENTOPERATIONVALUES_DELETE","FAASDOCUMENTOPERATIONVALUES_EDIT","FAASDOCUMENTOPERATIONVALUES_INSERT","FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD","FAASINVOKEDPROVIDERVALUES_AWS","FAASINVOKEDPROVIDERVALUES_AZURE","FAASINVOKEDPROVIDERVALUES_GCP","FAASTRIGGERVALUES_DATASOURCE","FAASTRIGGERVALUES_HTTP","FAASTRIGGERVALUES_OTHER","FAASTRIGGERVALUES_PUBSUB","FAASTRIGGERVALUES_TIMER","FaasDocumentOperationValues","FaasInvokedProviderValues","FaasTriggerValues","HOSTARCHVALUES_AMD64","HOSTARCHVALUES_ARM32","HOSTARCHVALUES_ARM64","HOSTARCHVALUES_IA64","HOSTARCHVALUES_PPC32","HOSTARCHVALUES_PPC64","HOSTARCHVALUES_X86","HTTPFLAVORVALUES_HTTP_1_0","HTTPFLAVORVALUES_HTTP_1_1","HTTPFLAVORVALUES_HTTP_2_0","HTTPFLAVORVALUES_QUIC","HTTPFLAVORVALUES_SPDY","HostArchValues","HttpFlavorValues","MESSAGETYPEVALUES_RECEIVED","MESSAGETYPEVALUES_SENT","MESSAGINGDESTINATIONKINDVALUES_QUEUE","MESSAGINGDESTINATIONKINDVALUES_TOPIC","MESSAGINGOPERATIONVALUES_PROCESS","MESSAGINGOPERATIONVALUES_RECEIVE","MessageTypeValues","MessagingDestinationKindValues","MessagingOperationValues","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT","NETHOSTCONNECTIONSUBTYPEVALUES_EDGE","NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B","NETHOSTCONNECTIONSUBTYPEVALUES_GPRS","NETHOSTCONNECTIONSUBTYPEVALUES_GSM","NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP","NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA","NETHOSTCONNECTIONSUBTYPEVALUES_IDEN","NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN","NETHOSTCONNECTIONSUBTYPEVALUES_LTE","NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA","NETHOSTCONNECTIONSUBTYPEVALUES_NR","NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA","NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA","NETHOSTCONNECTIONSUBTYPEVALUES_UMTS","NETHOSTCONNECTIONTYPEVALUES_CELL","NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE","NETHOSTCONNECTIONTYPEVALUES_UNKNOWN","NETHOSTCONNECTIONTYPEVALUES_WIFI","NETHOSTCONNECTIONTYPEVALUES_WIRED","NETTRANSPORTVALUES_INPROC","NETTRANSPORTVALUES_IP","NETTRANSPORTVALUES_IP_TCP","NETTRANSPORTVALUES_IP_UDP","NETTRANSPORTVALUES_OTHER","NETTRANSPORTVALUES_PIPE","NETTRANSPORTVALUES_UNIX","NetHostConnectionSubtypeValues","NetHostConnectionTypeValues","NetTransportValues","OSTYPEVALUES_AIX","OSTYPEVALUES_DARWIN","OSTYPEVALUES_DRAGONFLYBSD","OSTYPEVALUES_FREEBSD","OSTYPEVALUES_HPUX","OSTYPEVALUES_LINUX","OSTYPEVALUES_NETBSD","OSTYPEVALUES_OPENBSD","OSTYPEVALUES_SOLARIS","OSTYPEVALUES_WINDOWS","OSTYPEVALUES_Z_OS","OsTypeValues","RPCGRPCSTATUSCODEVALUES_ABORTED","RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS","RPCGRPCSTATUSCODEVALUES_CANCELLED","RPCGRPCSTATUSCODEVALUES_DATA_LOSS","RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED","RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION","RPCGRPCSTATUSCODEVALUES_INTERNAL","RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT","RPCGRPCSTATUSCODEVALUES_NOT_FOUND","RPCGRPCSTATUSCODEVALUES_OK","RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE","RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED","RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED","RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED","RPCGRPCSTATUSCODEVALUES_UNAVAILABLE","RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED","RPCGRPCSTATUSCODEVALUES_UNKNOWN","RpcGrpcStatusCodeValues","SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET","SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS","SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ","SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY","SEMATTRS_AWS_DYNAMODB_COUNT","SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES","SEMATTRS_AWS_DYNAMODB_INDEX_NAME","SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS","SEMATTRS_AWS_DYNAMODB_LIMIT","SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_PROJECTION","SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY","SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY","SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT","SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD","SEMATTRS_AWS_DYNAMODB_SEGMENT","SEMATTRS_AWS_DYNAMODB_SELECT","SEMATTRS_AWS_DYNAMODB_TABLE_COUNT","SEMATTRS_AWS_DYNAMODB_TABLE_NAMES","SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS","SEMATTRS_AWS_LAMBDA_INVOKED_ARN","SEMATTRS_CODE_FILEPATH","SEMATTRS_CODE_FUNCTION","SEMATTRS_CODE_LINENO","SEMATTRS_CODE_NAMESPACE","SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL","SEMATTRS_DB_CASSANDRA_COORDINATOR_DC","SEMATTRS_DB_CASSANDRA_COORDINATOR_ID","SEMATTRS_DB_CASSANDRA_IDEMPOTENCE","SEMATTRS_DB_CASSANDRA_KEYSPACE","SEMATTRS_DB_CASSANDRA_PAGE_SIZE","SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT","SEMATTRS_DB_CASSANDRA_TABLE","SEMATTRS_DB_CONNECTION_STRING","SEMATTRS_DB_HBASE_NAMESPACE","SEMATTRS_DB_JDBC_DRIVER_CLASSNAME","SEMATTRS_DB_MONGODB_COLLECTION","SEMATTRS_DB_MSSQL_INSTANCE_NAME","SEMATTRS_DB_NAME","SEMATTRS_DB_OPERATION","SEMATTRS_DB_REDIS_DATABASE_INDEX","SEMATTRS_DB_SQL_TABLE","SEMATTRS_DB_STATEMENT","SEMATTRS_DB_SYSTEM","SEMATTRS_DB_USER","SEMATTRS_ENDUSER_ID","SEMATTRS_ENDUSER_ROLE","SEMATTRS_ENDUSER_SCOPE","SEMATTRS_EXCEPTION_ESCAPED","SEMATTRS_EXCEPTION_MESSAGE","SEMATTRS_EXCEPTION_STACKTRACE","SEMATTRS_EXCEPTION_TYPE","SEMATTRS_FAAS_COLDSTART","SEMATTRS_FAAS_CRON","SEMATTRS_FAAS_DOCUMENT_COLLECTION","SEMATTRS_FAAS_DOCUMENT_NAME","SEMATTRS_FAAS_DOCUMENT_OPERATION","SEMATTRS_FAAS_DOCUMENT_TIME","SEMATTRS_FAAS_EXECUTION","SEMATTRS_FAAS_INVOKED_NAME","SEMATTRS_FAAS_INVOKED_PROVIDER","SEMATTRS_FAAS_INVOKED_REGION","SEMATTRS_FAAS_TIME","SEMATTRS_FAAS_TRIGGER","SEMATTRS_HTTP_CLIENT_IP","SEMATTRS_HTTP_FLAVOR","SEMATTRS_HTTP_HOST","SEMATTRS_HTTP_METHOD","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_ROUTE","SEMATTRS_HTTP_SCHEME","SEMATTRS_HTTP_SERVER_NAME","SEMATTRS_HTTP_STATUS_CODE","SEMATTRS_HTTP_TARGET","SEMATTRS_HTTP_URL","SEMATTRS_HTTP_USER_AGENT","SEMATTRS_MESSAGE_COMPRESSED_SIZE","SEMATTRS_MESSAGE_ID","SEMATTRS_MESSAGE_TYPE","SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE","SEMATTRS_MESSAGING_CONSUMER_ID","SEMATTRS_MESSAGING_CONVERSATION_ID","SEMATTRS_MESSAGING_DESTINATION","SEMATTRS_MESSAGING_DESTINATION_KIND","SEMATTRS_MESSAGING_KAFKA_CLIENT_ID","SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP","SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY","SEMATTRS_MESSAGING_KAFKA_PARTITION","SEMATTRS_MESSAGING_KAFKA_TOMBSTONE","SEMATTRS_MESSAGING_MESSAGE_ID","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","SEMATTRS_MESSAGING_OPERATION","SEMATTRS_MESSAGING_PROTOCOL","SEMATTRS_MESSAGING_PROTOCOL_VERSION","SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY","SEMATTRS_MESSAGING_SYSTEM","SEMATTRS_MESSAGING_TEMP_DESTINATION","SEMATTRS_MESSAGING_URL","SEMATTRS_NET_HOST_CARRIER_ICC","SEMATTRS_NET_HOST_CARRIER_MCC","SEMATTRS_NET_HOST_CARRIER_MNC","SEMATTRS_NET_HOST_CARRIER_NAME","SEMATTRS_NET_HOST_CONNECTION_SUBTYPE","SEMATTRS_NET_HOST_CONNECTION_TYPE","SEMATTRS_NET_HOST_IP","SEMATTRS_NET_HOST_NAME","SEMATTRS_NET_HOST_PORT","SEMATTRS_NET_PEER_IP","SEMATTRS_NET_PEER_NAME","SEMATTRS_NET_PEER_PORT","SEMATTRS_NET_TRANSPORT","SEMATTRS_PEER_SERVICE","SEMATTRS_RPC_GRPC_STATUS_CODE","SEMATTRS_RPC_JSONRPC_ERROR_CODE","SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE","SEMATTRS_RPC_JSONRPC_REQUEST_ID","SEMATTRS_RPC_JSONRPC_VERSION","SEMATTRS_RPC_METHOD","SEMATTRS_RPC_SERVICE","SEMATTRS_RPC_SYSTEM","SEMATTRS_THREAD_ID","SEMATTRS_THREAD_NAME","SEMRESATTRS_AWS_ECS_CLUSTER_ARN","SEMRESATTRS_AWS_ECS_CONTAINER_ARN","SEMRESATTRS_AWS_ECS_LAUNCHTYPE","SEMRESATTRS_AWS_ECS_TASK_ARN","SEMRESATTRS_AWS_ECS_TASK_FAMILY","SEMRESATTRS_AWS_ECS_TASK_REVISION","SEMRESATTRS_AWS_EKS_CLUSTER_ARN","SEMRESATTRS_AWS_LOG_GROUP_ARNS","SEMRESATTRS_AWS_LOG_GROUP_NAMES","SEMRESATTRS_AWS_LOG_STREAM_ARNS","SEMRESATTRS_AWS_LOG_STREAM_NAMES","SEMRESATTRS_CLOUD_ACCOUNT_ID","SEMRESATTRS_CLOUD_AVAILABILITY_ZONE","SEMRESATTRS_CLOUD_PLATFORM","SEMRESATTRS_CLOUD_PROVIDER","SEMRESATTRS_CLOUD_REGION","SEMRESATTRS_CONTAINER_ID","SEMRESATTRS_CONTAINER_IMAGE_NAME","SEMRESATTRS_CONTAINER_IMAGE_TAG","SEMRESATTRS_CONTAINER_NAME","SEMRESATTRS_CONTAINER_RUNTIME","SEMRESATTRS_DEPLOYMENT_ENVIRONMENT","SEMRESATTRS_DEVICE_ID","SEMRESATTRS_DEVICE_MODEL_IDENTIFIER","SEMRESATTRS_DEVICE_MODEL_NAME","SEMRESATTRS_FAAS_ID","SEMRESATTRS_FAAS_INSTANCE","SEMRESATTRS_FAAS_MAX_MEMORY","SEMRESATTRS_FAAS_NAME","SEMRESATTRS_FAAS_VERSION","SEMRESATTRS_HOST_ARCH","SEMRESATTRS_HOST_ID","SEMRESATTRS_HOST_IMAGE_ID","SEMRESATTRS_HOST_IMAGE_NAME","SEMRESATTRS_HOST_IMAGE_VERSION","SEMRESATTRS_HOST_NAME","SEMRESATTRS_HOST_TYPE","SEMRESATTRS_K8S_CLUSTER_NAME","SEMRESATTRS_K8S_CONTAINER_NAME","SEMRESATTRS_K8S_CRONJOB_NAME","SEMRESATTRS_K8S_CRONJOB_UID","SEMRESATTRS_K8S_DAEMONSET_NAME","SEMRESATTRS_K8S_DAEMONSET_UID","SEMRESATTRS_K8S_DEPLOYMENT_NAME","SEMRESATTRS_K8S_DEPLOYMENT_UID","SEMRESATTRS_K8S_JOB_NAME","SEMRESATTRS_K8S_JOB_UID","SEMRESATTRS_K8S_NAMESPACE_NAME","SEMRESATTRS_K8S_NODE_NAME","SEMRESATTRS_K8S_NODE_UID","SEMRESATTRS_K8S_POD_NAME","SEMRESATTRS_K8S_POD_UID","SEMRESATTRS_K8S_REPLICASET_NAME","SEMRESATTRS_K8S_REPLICASET_UID","SEMRESATTRS_K8S_STATEFULSET_NAME","SEMRESATTRS_K8S_STATEFULSET_UID","SEMRESATTRS_OS_DESCRIPTION","SEMRESATTRS_OS_NAME","SEMRESATTRS_OS_TYPE","SEMRESATTRS_OS_VERSION","SEMRESATTRS_PROCESS_COMMAND","SEMRESATTRS_PROCESS_COMMAND_ARGS","SEMRESATTRS_PROCESS_COMMAND_LINE","SEMRESATTRS_PROCESS_EXECUTABLE_NAME","SEMRESATTRS_PROCESS_EXECUTABLE_PATH","SEMRESATTRS_PROCESS_OWNER","SEMRESATTRS_PROCESS_PID","SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_PROCESS_RUNTIME_VERSION","SEMRESATTRS_SERVICE_INSTANCE_ID","SEMRESATTRS_SERVICE_NAME","SEMRESATTRS_SERVICE_NAMESPACE","SEMRESATTRS_SERVICE_VERSION","SEMRESATTRS_TELEMETRY_AUTO_VERSION","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_VERSION","SEMRESATTRS_WEBENGINE_DESCRIPTION","SEMRESATTRS_WEBENGINE_NAME","SEMRESATTRS_WEBENGINE_VERSION","SemanticAttributes","SemanticResourceAttributes","TELEMETRYSDKLANGUAGEVALUES_CPP","TELEMETRYSDKLANGUAGEVALUES_DOTNET","TELEMETRYSDKLANGUAGEVALUES_ERLANG","TELEMETRYSDKLANGUAGEVALUES_GO","TELEMETRYSDKLANGUAGEVALUES_JAVA","TELEMETRYSDKLANGUAGEVALUES_NODEJS","TELEMETRYSDKLANGUAGEVALUES_PHP","TELEMETRYSDKLANGUAGEVALUES_PYTHON","TELEMETRYSDKLANGUAGEVALUES_RUBY","TELEMETRYSDKLANGUAGEVALUES_WEBJS","TelemetrySdkLanguageValues","init_esm","__esmMin","init_esm_shims","init_trace","init_resource"]}